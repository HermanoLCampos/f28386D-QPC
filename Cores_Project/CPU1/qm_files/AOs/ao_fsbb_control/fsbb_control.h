//$file${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control::fsbb_control.h} 
//
// Model: main_model.qm
// File:  ${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control::fsbb_control.h}
//
// This code has been generated by QM 6.1.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control::fsbb_control.h} 
#ifndef AO_FSBB_CONTROL_H_
#define AO_FSBB_CONTROL_H_

#include "main_qm.h"

//$declare${CPU1::AOs::AO_FSBB_Control} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${CPU1::AOs::AO_FSBB_Control::FSBB_Control} ................................
typedef struct {
// protected:
    QActive super;

// private:
    float setpoints[NUM_OF_SETPOINTS];
    QTimeEvt time_evt_update_params;
} FSBB_Control;

// public:
void FSBB_Control_Start_Precharge(FSBB_Control * const me,
    QEvt const * const e);
void FSBB_Control_Finish_Precharge(FSBB_Control * const me,
    QEvt const * const e);

// protected:
QState FSBB_Control_initial(FSBB_Control * const me, void const * const par);
QState FSBB_Control_Waiting_QF(FSBB_Control * const me, QEvt const * const e);
QState FSBB_Control_Start(FSBB_Control * const me, QEvt const * const e);
QState FSBB_Control_Operation(FSBB_Control * const me, QEvt const * const e);
QState FSBB_Control_Uncharged(FSBB_Control * const me, QEvt const * const e);
QState FSBB_Control_Precharge(FSBB_Control * const me, QEvt const * const e);
QState FSBB_Control_Idle(FSBB_Control * const me, QEvt const * const e);
QState FSBB_Control_Running(FSBB_Control * const me, QEvt const * const e);
QState FSBB_Control_Fault(FSBB_Control * const me, QEvt const * const e);
QState FSBB_Control_To_Idle(FSBB_Control * const me, QEvt const * const e);

//${CPU1::AOs::AO_FSBB_Control::inst_ao_fsbb_control} ........................
extern FSBB_Control inst_ao_fsbb_control;

//${CPU1::AOs::AO_FSBB_Control::globals::p_ao_fsbb_control} ..................
extern QActive * const p_ao_fsbb_control;

//${CPU1::AOs::AO_FSBB_Control::globals::ao_fsbb_control_ctor} ...............
void ao_fsbb_control_ctor(const QActive  * const pAO);
//$enddecl${CPU1::AOs::AO_FSBB_Control} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
