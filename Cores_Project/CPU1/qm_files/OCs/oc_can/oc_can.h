//$file${.::Cores_Project::CPU1::qm_files::OCs::oc_can::oc_can.h} vvvvvvvvvvvv
//
// Model: main_model.qm
// File:  ${.::Cores_Project::CPU1::qm_files::OCs::oc_can::oc_can.h}
//
// This code has been generated by QM 6.1.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::Cores_Project::CPU1::qm_files::OCs::oc_can::oc_can.h} ^^^^^^^^^
#ifndef OC_CAN_H_
#define OC_CAN_H_

#include "main_qm.h"

//$declare${OCs::OC_CAN} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${OCs::OC_CAN::OC_CAN} .....................................................
typedef struct {
// protected:
    QHsm super;

// private:
    QActive * owner;
    uint16_t id;
} OC_CAN;

// public:
void OC_CAN_ctor(OC_CAN * const me,
    QActive * const owner,
    uint16_t id);

// protected:
QState OC_CAN_initial(OC_CAN * const me, void const * const par);
QState OC_CAN_Waiting_QF(OC_CAN * const me, QEvt const * const e);
QState OC_CAN_Start(OC_CAN * const me, QEvt const * const e);
QState OC_CAN_Operation(OC_CAN * const me, QEvt const * const e);
QState OC_CAN_Error_Passive(OC_CAN * const me, QEvt const * const e);
QState OC_CAN_Error_Active(OC_CAN * const me, QEvt const * const e);
QState OC_CAN_Bus_Off(OC_CAN * const me, QEvt const * const e);
//$enddecl${OCs::OC_CAN} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
