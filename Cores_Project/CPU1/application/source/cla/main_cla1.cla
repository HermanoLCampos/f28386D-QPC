/*
 * main_cla1.cla
 *
 *  Created on: 11 de mar de 2024
 *      Author: ramon.martins
 */

#include "cla1_config.h"

#include "signal_processing_cla.h"
#include "adc_macros.h"
#include "qm_files/macros_qm.h"

void initializeIIRFilter(IIRFilter *filter, float *b, float *a) {
    // Copy coefficients
    for (uint16_t i = 0; i <= N_STAGES; ++i) {
        filter->b[i] = b[i];
        filter->a[i] = a[i];
    }

    // Initialize delay lines
    for (uint16_t i = 0; i <= N_STAGES; ++i) {
        filter->x[i] = 0.0;
        filter->y[i] = 0.0;
    }
}

float applyIIRFilter(IIRFilter *filter, float input) {
    // Shift input into the delay line
    for (int16_t i = N_STAGES; i > 0; --i) {
        filter->x[i] = filter->x[i - 1];
        filter->y[i] = filter->y[i - 1];
    }
    filter->x[0] = input;

    // Calculate output
    filter->y[0] = 0.0;
    for (uint16_t i = 0; i <= N_STAGES; ++i) {
        filter->y[0] += (filter->b[i] * filter->x[i]) - (filter->a[i] * filter->y[i]);
    }

    return filter->y[0];
}

float PID_Control_Exe(PID_Control_t *PID_Data){

    PID_Data->P_Component            = PID_Data->Kp*PID_Data->Error;
    PID_Data->I_Component           += CONTROL_PERIOD_SEC*(PID_Data->Ki*0.5f*(PID_Data->Error+PID_Data->Error_Prev) - PID_Data->BackCalculation);
    PID_Data->D_Component            = (2*PID_Data->Kd*(PID_Data->Error-PID_Data->Error_Prev)+(2.0f*PID_Data->Tau-CONTROL_PERIOD_SEC)*PID_Data->D_Component)/(2*PID_Data->Tau+(CONTROL_PERIOD_SEC));

    PID_Data->Error_Prev             = PID_Data->Error;

    float control_action;
    control_action                   = PID_Data->P_Component+PID_Data->I_Component + PID_Data->D_Component;

    PID_Data->BackCalculation = 0;
    if(control_action>PID_Data->Max_Lim){
        PID_Data->BackCalculation    = (control_action - PID_Data->Max_Lim)*PID_Data->Klim;
        control_action               = PID_Data->Max_Lim;

    }else if(control_action<PID_Data->Min_Lim){
        PID_Data->BackCalculation    = (control_action - PID_Data->Min_Lim)*PID_Data->Klim;
        control_action               = PID_Data->Min_Lim;
    }

    return control_action;
}

IIRFilter hall1_current_filter;
IIRFilter hall2_current_filter;

IIRFilter skiip1_current_filter;
IIRFilter skiip1_temp_filter;
IIRFilter skiip1_voltage_filter;

IIRFilter skiip2_current_filter;
IIRFilter skiip2_temp_filter;
IIRFilter skiip2_voltage_filter;

// Current Control PID
PID_Control_t FSBB_IL_PID_Control;

float32_t hall1_current_fp;
float32_t hall2_current_fp;
float32_t skiip1_current_fp;
float32_t skiip1_temp_fp;
float32_t skiip1_voltage_fp;
float32_t skiip2_current_fp;
float32_t skiip2_temp_fp;
float32_t skiip2_voltage_fp;

__interrupt void Cla1Task1 ( void )
{
//    __mdebugstop();


    hall1_current_fp  = HALL1_CURRENT_BIT_FACTOR  * (applyIIRFilter(&hall1_current_filter , (float32_t) ADC_readResult(myADCC_RESULT_BASE, myADCC_HALL1_CURRENT         )) - HALL1_CURRENT_BIT_OFFSET  );
    hall2_current_fp  = HALL2_CURRENT_BIT_FACTOR  * (applyIIRFilter(&hall2_current_filter , (float32_t) ADC_readResult(myADCA_RESULT_BASE, myADCA_HALL2_CURRENT         )) - HALL2_CURRENT_BIT_OFFSET  );

    skiip1_current_fp = SKIIP1_CURRENT_BIT_FACTOR * (applyIIRFilter(&skiip1_current_filter, (float32_t) ADC_readResult(myADCA_RESULT_BASE, myADCA_SKIIP1_CURRENT        )) - SKIIP1_CURRENT_BIT_OFFSET );
    skiip1_temp_fp    = SKIIP1_TEMP_BIT_FACTOR    * (applyIIRFilter(&skiip1_temp_filter   , (float32_t) ADC_readResult(myADCD_RESULT_BASE, myADCD_SKIIP1_TEMP           )) - SKIIP1_TEMP_BIT_OFFSET    );
    skiip1_voltage_fp = SKIIP1_VOLTAGE_BIT_FACTOR * (applyIIRFilter(&skiip1_voltage_filter, (float32_t) ADC_readResult(myADCB_RESULT_BASE, myADCB_SKIIP1_DC_LINK_VOLTAGE)) - SKIIP1_VOLTAGE_BIT_OFFSET );

    skiip2_current_fp = SKIIP2_CURRENT_BIT_FACTOR * (applyIIRFilter(&skiip2_current_filter, (float32_t) ADC_readResult(myADCC_RESULT_BASE, myADCC_SKIIP2_CURRENT        )) - SKIIP2_CURRENT_BIT_OFFSET );
    skiip2_temp_fp    = SKIIP2_TEMP_BIT_FACTOR    * (applyIIRFilter(&skiip2_temp_filter   , (float32_t) ADC_readResult(myADCD_RESULT_BASE, myADCD_SKIIP2_TEMP           )) - SKIIP2_TEMP_BIT_OFFSET    );
    skiip2_voltage_fp = SKIIP2_VOLTAGE_BIT_FACTOR * (applyIIRFilter(&skiip2_voltage_filter, (float32_t) ADC_readResult(myADCB_RESULT_BASE, myADCB_SKIIP2_DC_LINK_VOLTAGE)) - SKIIP2_VOLTAGE_BIT_OFFSET );

//    // Teste Vitao
//
//    //Vbatt
//    skiip1_voltage_fp = 5*SKIIP1_VOLTAGE_BIT_FACTOR * applyIIRFilter(&skiip1_voltage_filter, (float32_t) ADC_readResult(myADCB_RESULT_BASE, myADCB_SKIIP1_DC_LINK_VOLTAGE) - SKIIP1_VOLTAGE_BIT_OFFSET );
//    //Vout
//    skiip2_voltage_fp = 5*SKIIP2_VOLTAGE_BIT_FACTOR * applyIIRFilter(&skiip2_voltage_filter, (float32_t) ADC_readResult(myADCB_RESULT_BASE, myADCB_SKIIP2_DC_LINK_VOLTAGE) - SKIIP2_VOLTAGE_BIT_OFFSET );
//
//    //IL
//    skiip1_current_fp = (0.1f*200.0f)*(SKIIP1_CURRENT_BIT_FACTOR * applyIIRFilter(&skiip1_current_filter, (float32_t) ADC_readResult(myADCA_RESULT_BASE, myADCA_SKIIP1_CURRENT        ) - SKIIP1_CURRENT_BIT_OFFSET ) - (float32_t)1.58);

    CLA2CPU_Message.hall1_current   = hall1_current_fp;
    CLA2CPU_Message.hall2_current   = hall2_current_fp;
    CLA2CPU_Message.skiip1_current  = skiip1_current_fp;
    CLA2CPU_Message.skiip1_temp     = skiip1_temp_fp;
    CLA2CPU_Message.skiip1_voltage  = skiip1_voltage_fp;

    CLA2CPU_Message.skiip2_current  = skiip2_current_fp;
    CLA2CPU_Message.skiip2_temp     = skiip2_temp_fp;
    CLA2CPU_Message.skiip2_voltage  = skiip2_voltage_fp;

    CLA2CPU_Message.sbc_muxout      = ADC_readResult(myADCD_RESULT_BASE, myADCD_SBC_MUXOUT);

    CLA2CPU_Message.task_1_watchdog_response = CPU2CLA_Message.task_1_watchdog_request;
}

__interrupt void Cla1Task2 ( void )
{

//    __mdebugstop();

    // Control
//    Erro=Iref-Il; //(*)
//
//    Gain_Kp=Kp*Il; //(*)
//
//    AWU=VL-VL_ref; //(*)
//
//    Gain_Ki= Erro*Ki + AWU ; //(*)
//
//    Integrador = ((Gain_Ki + Gain_Ki_ant)/2)*T; //(*)
//
//    Area_integrada=Integrador + Area_integrada; //(*)
//
//    VL_ref=Area_integrada-Gain_Kp; //(*)
//
//    VL=0; //(*)
//    if(VL_ref>1400){ //(*)
//        VL=1400; //(*)
//    }else{ //(*)
//        if(VL_ref<-960){ //(*)
//            VL=-960; //(*)
//        }else{ //(*)
//            VL = VL_ref; //(*)
//        }//(*)
//    }//(*)
//
//    VL_ref1 = VL_ref;
//
//    if(Vin_m<=0){
//        D_Buck=0;
//        D_Boost=0;
//    }
//
//    if( VL< (Vin_m - Vout) ){
//        //Buck
//
//        D_Boost = 1;
//        if(Vin_m==0){
//            D_Buck=1;
//        }else{
//            D_Buck=(VL+Vout)/Vin_m;
//        }
//
//
//    }else{
//        //Boost
//        D_Buck = 1;
//
//        if(Vout==0){
//            D_Boost=1;
//        }else{
//            D_Boost=(-VL+Vin_m)/Vout;
//        }
//    }



    float32_t vl_ref;
    float32_t duty_cicle_switch_vin;
    float32_t duty_cicle_switch_vout;

    // Change Duty Cicle

    if(CPU2CLA_Message.FSBB_Control_State == FSBB_CONTROL_RUNNING){

    FSBB_IL_PID_Control.Min_Lim              = -skiip2_voltage_fp;
    FSBB_IL_PID_Control.Max_Lim              =  skiip1_voltage_fp;
    FSBB_IL_PID_Control.Error = CPU2CLA_Message.FSBB_IL_Setpoint - skiip1_current_fp;

    vl_ref = PID_Control_Exe( &FSBB_IL_PID_Control );

    if( skiip1_voltage_fp < VIN_MIN){
        duty_cicle_switch_vin = 0;
        duty_cicle_switch_vout= 0;
    }else
    if(vl_ref < (skiip1_voltage_fp-skiip2_voltage_fp)){
        //Buck Mode
        duty_cicle_switch_vout = MAX_DUTY_CICLE_VOUT_SWITCH; //
        duty_cicle_switch_vin  = ( vl_ref + skiip2_voltage_fp )/skiip1_voltage_fp;
    }else{
        //Boost Mode
        duty_cicle_switch_vin = MAX_DUTY_CICLE_VIN_SWITCH;
        duty_cicle_switch_vout = ( skiip1_voltage_fp - vl_ref )/skiip2_voltage_fp;
    }

    }else{
        duty_cicle_switch_vin  = MIN_OFF_DUTY_CICLE_VIN;
        duty_cicle_switch_vout = MIN_OFF_DUTY_CICLE_VOUT;
    }

#ifdef FORCE_DUTY_CICLE
    duty_cicle_switch_vin = CPU2CLA_Message.duty_cicle_vin*( 0.01f );
    duty_cicle_switch_vout = CPU2CLA_Message.duty_cicle_vout*( 0.01f );
#endif

    if(duty_cicle_switch_vin<MIN_DUTY_CICLE_VIN_SWITCH){
        duty_cicle_switch_vin = MIN_DUTY_CICLE_VIN_SWITCH;
    }else
    if(MAX_DUTY_CICLE_VIN_SWITCH<duty_cicle_switch_vin){
        duty_cicle_switch_vin = MAX_DUTY_CICLE_VIN_SWITCH;
    }

    if(duty_cicle_switch_vout<MIN_DUTY_CICLE_VOUT_SWITCH){
        duty_cicle_switch_vout = MIN_DUTY_CICLE_VOUT_SWITCH;
    }else
    if(MAX_DUTY_CICLE_VOUT_SWITCH<duty_cicle_switch_vout){
        duty_cicle_switch_vout = MAX_DUTY_CICLE_VOUT_SWITCH;
    }

    uint16_t counter_comp = EPWM_PRD-(EPWM_PRD-1)*duty_cicle_switch_vin;

    if(counter_comp < EPWM_DEAD_TIME_COUNT+1) counter_comp = EPWM_DEAD_TIME_COUNT+1;

    EPWM_setCounterCompareValue(GD_HB_1_BASE, EPWM_COUNTER_COMPARE_A, counter_comp);
    EPWM_setCounterCompareValue(GD_HB_1_BASE, EPWM_COUNTER_COMPARE_B, counter_comp-EPWM_DEAD_TIME_COUNT);
    EPWM_setCounterCompareValue(FO_HB_1_BASE, EPWM_COUNTER_COMPARE_A, counter_comp);
    EPWM_setCounterCompareValue(FO_HB_1_BASE, EPWM_COUNTER_COMPARE_B, counter_comp-EPWM_DEAD_TIME_COUNT);

    counter_comp = 1+(EPWM_PRD-1)*duty_cicle_switch_vout;
    if(counter_comp < EPWM_DEAD_TIME_COUNT+1) counter_comp = EPWM_DEAD_TIME_COUNT+1;

    EPWM_setCounterCompareValue(GD_HB_2_BASE, EPWM_COUNTER_COMPARE_A, counter_comp);
    EPWM_setCounterCompareValue(GD_HB_2_BASE, EPWM_COUNTER_COMPARE_B, counter_comp-EPWM_DEAD_TIME_COUNT);
    EPWM_setCounterCompareValue(FO_HB_2_BASE, EPWM_COUNTER_COMPARE_A, counter_comp);
    EPWM_setCounterCompareValue(FO_HB_2_BASE, EPWM_COUNTER_COMPARE_B, counter_comp-EPWM_DEAD_TIME_COUNT);

    EPWM_clearEventTriggerInterruptFlag(GD_HB_1_BASE);

    CLA2CPU_Message.task_2_watchdog_response = CPU2CLA_Message.task_2_watchdog_request;
}

__interrupt void Cla1Task3 ( void )
{
    __mdebugstop();
}

__interrupt void Cla1Task4 ( void )
{
    __mdebugstop();
}

__interrupt void Cla1Task5 ( void )
{
    __mdebugstop();
}

__interrupt void Cla1Task6 ( void )
{
    __mdebugstop();
}

__interrupt void Cla1Task7 ( void )
{
    __mdebugstop();
}

__interrupt void Cla1Task8 ( void )
{
//    __mdebugstop();
    // Init Filters

    float b[N_STAGES + 1];
    float a[N_STAGES + 1];

    a[0] =  1;
    a[1] = -3.414268611873483;
    a[2] =  4.480552061349626;
    a[3] = -2.6698010194959334;
    a[4] =  0.6083293787260587;
    a[5] =  0;
    a[6] =  0;
    a[7] =  0;
    a[8] =  0;

    b[0] = 0.0002947232832589817;
    b[1] = 0.0011788931330359268;
    b[2] = 0.00176833969955389;
    b[3] = 0.0011788931330359268;
    b[4] = 0.0002947232832589817;
    b[5] = 0;
    b[6] = 0;
    b[7] = 0;
    b[8] = 0;

    initializeIIRFilter(&hall1_current_filter,b, a);
    initializeIIRFilter(&hall2_current_filter,b, a);

    initializeIIRFilter(&skiip1_current_filter,b, a);
    initializeIIRFilter(&skiip1_temp_filter,b, a);
    initializeIIRFilter(&skiip1_voltage_filter,b, a);

    initializeIIRFilter(&skiip2_current_filter,b, a);
    initializeIIRFilter(&skiip2_temp_filter,b, a);
    initializeIIRFilter(&skiip2_voltage_filter,b, a);

    // Inductor Current Control

    FSBB_IL_PID_Control.Kp                   = 0.01421;
    FSBB_IL_PID_Control.Ki                   = 0.08160;
    FSBB_IL_PID_Control.Kd                   = 0.00000;
    FSBB_IL_PID_Control.Tau                  = 0.50000;
    FSBB_IL_PID_Control.Ktt                  = 0.5;

    FSBB_IL_PID_Control.Klim = FSBB_IL_PID_Control.Ki/(FSBB_IL_PID_Control.Kp*FSBB_IL_PID_Control.Ktt);

    FSBB_IL_PID_Control.I_Component          = 0;
    FSBB_IL_PID_Control.D_Component          = 0;

    FSBB_IL_PID_Control.BackCalculation = 0;

    FSBB_IL_PID_Control.Min_Lim              = 0;
    FSBB_IL_PID_Control.Max_Lim              = 0;

    FSBB_IL_PID_Control.Error_Prev           =0;

}
