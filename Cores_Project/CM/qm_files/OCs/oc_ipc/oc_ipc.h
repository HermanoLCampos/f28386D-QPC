//$file${.::Cores_Project::CM::qm_files::OCs::oc_ipc::oc_ipc.h} vvvvvvvvvvvvvv
//
// Model: main_model.qm
// File:  ${.::Cores_Project::CM::qm_files::OCs::oc_ipc::oc_ipc.h}
//
// This code has been generated by QM 6.1.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::Cores_Project::CM::qm_files::OCs::oc_ipc::oc_ipc.h} ^^^^^^^^^^^
#ifndef OC_IPC_H_
#define OC_IPC_H_

#include "main_qm.h"

//$declare${OCs::OC_IPC} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${OCs::OC_IPC::OC_IPC} .....................................................
typedef struct {
// protected:
    QHsm super;

// private:
    QActive * owner;
    uint16_t id;

// public:
    Communication_Message_t msg_buffer[OC_IPC_NUM_OF_INST];
    uint16_t n_msg_received;
    uint16_t fault_cont;
} OC_IPC;

// public:
void OC_IPC_ctor(OC_IPC * const me,
    QActive * const owner,
    uint16_t id);
void OC_IPC_send_msg(OC_IPC * const me,
    QEvt const * const e);
void OC_IPC_receive_msg(OC_IPC * const me,
    QEvt const * const e);
void OC_IPC_reset_ch(OC_IPC * const me,
    QEvt const * const e);
void OC_IPC_remote_reset(OC_IPC * const me,
    QEvt const * const e);

// protected:
QState OC_IPC_initial(OC_IPC * const me, void const * const par);
QState OC_IPC_Waiting_QF(OC_IPC * const me, QEvt const * const e);
QState OC_IPC_Start(OC_IPC * const me, QEvt const * const e);
QState OC_IPC_Operation(OC_IPC * const me, QEvt const * const e);
QState OC_IPC_Running(OC_IPC * const me, QEvt const * const e);
QState OC_IPC_Error(OC_IPC * const me, QEvt const * const e);
QState OC_IPC_In_Reset(OC_IPC * const me, QEvt const * const e);
//$enddecl${OCs::OC_IPC} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
