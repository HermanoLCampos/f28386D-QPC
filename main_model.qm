<?xml version="1.0" encoding="UTF-8"?>
<model version="6.1.1" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm.xsd">
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${OCs}-->
 <package name="OCs" stereotype="0x00">
  <!--${OCs::OC_IPC}-->
  <package name="OC_IPC" stereotype="0x00">
   <!--${OCs::OC_IPC::OC_IPC}-->
   <class name="OC_IPC" superclass="qpc::QHsm">
    <!--${OCs::OC_IPC::OC_IPC::owner}-->
    <attribute name="owner" type="QActive *" visibility="0x02" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::id}-->
    <attribute name="id" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::msg_buffer[BSP_IPC_BUFFER_SIZE]}-->
    <attribute name="msg_buffer[BSP_IPC_BUFFER_SIZE]" type="Communication_Message_t" visibility="0x00" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::n_msg_received}-->
    <attribute name="n_msg_received" type="uint16_t" visibility="0x00" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::fault_cont}-->
    <attribute name="fault_cont" type="uint16_t" visibility="0x00" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::ctor}-->
    <operation name="ctor" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_IPC::OC_IPC::ctor::owner}-->
     <parameter name="owner" type="QActive * const"/>
     <!--${OCs::OC_IPC::OC_IPC::ctor::id}-->
     <parameter name="id" type="uint16_t"/>
     <code>QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;OC_IPC_initial));
me-&gt;owner = owner;
me-&gt;id = id;</code>
    </operation>
    <!--${OCs::OC_IPC::OC_IPC::send_msg}-->
    <operation name="send_msg" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_IPC::OC_IPC::send_msg::e}-->
     <parameter name="e" type="QEvt const * const"/>
    </operation>
    <!--${OCs::OC_IPC::OC_IPC::receive_msg}-->
    <operation name="receive_msg" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_IPC::OC_IPC::receive_msg::e}-->
     <parameter name="e" type="QEvt const * const"/>
    </operation>
    <!--${OCs::OC_IPC::OC_IPC::reset_ch}-->
    <operation name="reset_ch" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_IPC::OC_IPC::reset_ch::e}-->
     <parameter name="e" type="QEvt const * const"/>
    </operation>
    <!--${OCs::OC_IPC::OC_IPC::remote_reset}-->
    <operation name="remote_reset" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_IPC::OC_IPC::remote_reset::e}-->
     <parameter name="e" type="QEvt const * const"/>
    </operation>
    <!--${OCs::OC_IPC::OC_IPC::SM}-->
    <statechart properties="0x00">
     <!--${OCs::OC_IPC::OC_IPC::SM::initial}-->
     <initial target="../1">
      <initial_glyph conn="4,8,5,3,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${OCs::OC_IPC::OC_IPC::SM::Waiting_QF}-->
     <state name="Waiting_QF">
      <!--${OCs::OC_IPC::OC_IPC::SM::Waiting_QF::RUNNING_QF}-->
      <tran trig="RUNNING_QF" target="../../2">
       <tran_glyph conn="8,10,3,0,10,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,4,20,12"/>
     </state>
     <!--${OCs::OC_IPC::OC_IPC::SM::Start}-->
     <state name="Start">
      <entry>me-&gt;n_msg_received = 0;
me-&gt;fault_cont = 0;</entry>
      <!--${OCs::OC_IPC::OC_IPC::SM::Start::INIT_COMPLETE}-->
      <tran trig="INIT_COMPLETE" target="../../3/5">
       <tran_glyph conn="8,30,3,3,24,-10,24">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,24,20,12">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <!--${OCs::OC_IPC::OC_IPC::SM::Operation}-->
     <state name="Operation">
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_RECEIVE_MSG}-->
      <tran trig="IPC_RECEIVE_MSG">
       <action>//BSP_BKPT;
OC_IPC_receive_msg(me,e);</action>
       <tran_glyph conn="36,12,3,-1,16">
        <action box="0,-2,15,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_SEND_MSG}-->
      <tran trig="IPC_SEND_MSG">
       <action>//BSP_BKPT;
OC_IPC_send_msg(me,e);
</action>
       <tran_glyph conn="36,14,3,-1,16">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_FULL_BUS}-->
      <tran trig="IPC_FULL_BUS" target="../6">
       <tran_glyph conn="36,44,3,3,20">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_RESET_CH}-->
      <tran trig="IPC_RESET_CH" target="../7">
       <action>OC_IPC_reset_ch(me,e);</action>
       <tran_glyph conn="36,32,3,3,20">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_REMOTE_RESET}-->
      <tran trig="IPC_REMOTE_RESET" target="../5">
       <action>OC_IPC_remote_reset(me,e);</action>
       <tran_glyph conn="36,22,3,3,20">
        <action box="0,-2,17,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::Running}-->
      <state name="Running">
       <entry>//BSP_BKPT;</entry>
       <exit>//BSP_BKPT;</exit>
       <state_glyph node="56,16,18,8">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::Error}-->
      <state name="Error">
       <entry>//BSP_BKPT;
//me-&gt;fault_cont++;
//QACTIVE_POST(
//    me-&gt;owner,
//    &amp;im_evt_ipc_reset_ch[me-&gt;id].super,
//    (void *)0
//);</entry>
       <!--${OCs::OC_IPC::OC_IPC::SM::Operation::Error::IPC_RECEIVE_MSG, IPC_SEND_MSG}-->
       <tran trig="IPC_RECEIVE_MSG, IPC_SEND_MSG">
        <tran_glyph conn="56,46,3,-1,16">
         <action box="0,-2,14,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="56,40,18,8">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::In_Reset}-->
      <state name="In_Reset">
       <entry>//BSP_BKPT;
//oc_ipc_reset_ch(me-&gt;id);</entry>
       <!--${OCs::OC_IPC::OC_IPC::SM::Operation::In_Reset::IPC_RESET_COMPLETE}-->
       <tran trig="IPC_RESET_COMPLETE" target="../../5">
        <tran_glyph conn="56,32,3,1,22,-10,-4">
         <action box="0,-2,18,2"/>
        </tran_glyph>
       </tran>
       <!--${OCs::OC_IPC::OC_IPC::SM::Operation::In_Reset::IPC_RECEIVE_MSG, IPC_SEND_MSG}-->
       <tran trig="IPC_RECEIVE_MSG, IPC_SEND_MSG">
        <tran_glyph conn="56,34,3,-1,16">
         <action box="0,-2,16,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="56,28,18,8">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="36,4,54,46"/>
     </state>
     <state_diagram size="100,80"/>
    </statechart>
   </class>
  </package>
  <!--${OCs::OC_CAN}-->
  <package name="OC_CAN" stereotype="0x00">
   <!--${OCs::OC_CAN::OC_CAN}-->
   <class name="OC_CAN" superclass="qpc::QHsm">
    <!--${OCs::OC_CAN::OC_CAN::owner}-->
    <attribute name="owner" type="QActive *" visibility="0x02" properties="0x00"/>
    <!--${OCs::OC_CAN::OC_CAN::id}-->
    <attribute name="id" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${OCs::OC_CAN::OC_CAN::msg_buffer[OC_CAN_MSG_BUFFER_SIZ~}-->
    <attribute name="msg_buffer[OC_CAN_MSG_BUFFER_SIZE]" type="uint16_t" visibility="0x00" properties="0x00"/>
    <!--${OCs::OC_CAN::OC_CAN::ctor}-->
    <operation name="ctor" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_CAN::OC_CAN::ctor::owner}-->
     <parameter name="owner" type="QActive * const"/>
     <!--${OCs::OC_CAN::OC_CAN::ctor::id}-->
     <parameter name="id" type="uint16_t"/>
     <code>QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;OC_CAN_initial));
me-&gt;owner = owner;
me-&gt;id = id;</code>
    </operation>
    <!--${OCs::OC_CAN::OC_CAN::send_msg}-->
    <operation name="send_msg" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_CAN::OC_CAN::send_msg::e}-->
     <parameter name="e" type="QEvt const * const"/>
    </operation>
    <!--${OCs::OC_CAN::OC_CAN::receive_msg}-->
    <operation name="receive_msg" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_CAN::OC_CAN::receive_msg::e}-->
     <parameter name="e" type="QEvt const * const"/>
    </operation>
    <!--${OCs::OC_CAN::OC_CAN::SM}-->
    <statechart properties="0x00">
     <!--${OCs::OC_CAN::OC_CAN::SM::initial}-->
     <initial target="../1">
      <initial_glyph conn="4,8,5,3,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${OCs::OC_CAN::OC_CAN::SM::Waiting_QF}-->
     <state name="Waiting_QF">
      <!--${OCs::OC_CAN::OC_CAN::SM::Waiting_QF::RUNNING_QF}-->
      <tran trig="RUNNING_QF" target="../../2">
       <tran_glyph conn="8,10,3,0,10,16">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,4,20,12"/>
     </state>
     <!--${OCs::OC_CAN::OC_CAN::SM::Start}-->
     <state name="Start">
      <!--${OCs::OC_CAN::OC_CAN::SM::Start::INIT_COMPLETE}-->
      <tran trig="INIT_COMPLETE" target="../../3">
       <tran_glyph conn="8,32,3,3,28">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,26,20,12"/>
     </state>
     <!--${OCs::OC_CAN::OC_CAN::SM::Operation}-->
     <state name="Operation">
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::initial}-->
      <initial target="../6">
       <initial_glyph conn="54,20,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::CAN_RECEIVE_MSG}-->
      <tran trig="CAN_RECEIVE_MSG">
       <action>//BSP_BKPT;
OC_CAN_receive_msg(me,e);
//BSP_BKPT;</action>
       <tran_glyph conn="36,10,3,-1,16">
        <action box="0,-2,16,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::CAN_SEND_MSG}-->
      <tran trig="CAN_SEND_MSG">
       <action>//BSP_BKPT;
OC_CAN_send_msg(me,e);
//BSP_BKPT;</action>
       <tran_glyph conn="36,12,3,-1,16">
        <action box="0,-2,15,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::CAN_PASSIVE_ERROR}-->
      <tran trig="CAN_PASSIVE_ERROR" target="../5">
       <tran_glyph conn="36,36,3,3,22">
        <action box="0,-2,18,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::CAN_BUS_OFF}-->
      <tran trig="CAN_BUS_OFF" target="../7">
       <tran_glyph conn="36,52,3,3,22">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Error_Passive}-->
      <state name="Error_Passive">
       <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Error_Passive::CAN_ERROR_CLEAR}-->
       <tran trig="CAN_ERROR_CLEAR" target="../..">
        <tran_glyph conn="58,38,3,1,26">
         <action box="0,-2,17,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="58,32,20,12"/>
      </state>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Error_Active}-->
      <state name="Error_Active">
       <state_glyph node="58,16,20,12"/>
      </state>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Bus_Off}-->
      <state name="Bus_Off">
       <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Bus_Off::CAN_SEND_MSG}-->
       <tran trig="CAN_SEND_MSG">
        <tran_glyph conn="58,56,3,-1,16">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Bus_Off::CAN_RECEIVE_MSG}-->
       <tran trig="CAN_RECEIVE_MSG" target="../..">
        <action>//BSP_BKPT;
OC_CAN_receive_msg(me,e);
//BSP_BKPT;</action>
        <tran_glyph conn="58,54,3,1,26">
         <action box="0,-2,16,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="58,48,20,12"/>
      </state>
      <state_glyph node="36,4,48,60"/>
     </state>
     <state_diagram size="104,71"/>
    </statechart>
   </class>
  </package>
  <!--${OCs::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${OCs::Signals::OC_IPC_SIGNALS}-->
   <attribute name="OC_IPC_SIGNALS" type="" visibility="0x03" properties="0x00">
    <code>\
    IPC_RECEIVE_MSG_SIG,\
    IPC_SEND_MSG_SIG,\
    IPC_FULL_BUS_SIG,\
    IPC_RESET_CH_SIG,\
    IPC_REMOTE_RESET_SIG,\
    IPC_RESET_COMPLETE_SIG</code>
   </attribute>
   <!--${OCs::Signals::OC_CAN_SIGNALS}-->
   <attribute name="OC_CAN_SIGNALS" type="" visibility="0x03" properties="0x00">
    <code>\
    CAN_RECEIVE_MSG_SIG,\
    CAN_SEND_MSG_SIG,\
    CAN_PASSIVE_ERROR_SIG,\
    CAN_BUS_OFF_SIG,\
    CAN_ERROR_CLEAR_SIG</code>
   </attribute>
  </package>
 </package>
 <!--${CPU1}-->
 <package name="CPU1" stereotype="0x00">
  <!--${CPU1::AOs}-->
  <package name="AOs" stereotype="0x02">
   <!--${CPU1::AOs::AO_FSBB_Control}-->
   <package name="AO_FSBB_Control" stereotype="0x00">
    <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control}-->
    <class name="FSBB_Control" superclass="qpc::QActive">
     <documentation>Peripherals of this AO:
 - CLA1
 - EPWM3_Per: 
 - EPWM4
 - GPIOs:
  -  PTD</documentation>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::setpoints[NUM_OF_SETPOINTS]}-->
     <attribute name="setpoints[NUM_OF_SETPOINTS]" type="float" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::time_evt_check_params}-->
     <attribute name="time_evt_check_params" type="QTimeEvt" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::time_evt_cla_watchdog}-->
     <attribute name="time_evt_cla_watchdog" type="QTimeEvt" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::time_evt_settle}-->
     <attribute name="time_evt_settle" type="QTimeEvt" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::time_evt_report_status}-->
     <attribute name="time_evt_report_status" type="QTimeEvt" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::aux1}-->
     <attribute name="aux1" type="uint16_t" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::aux2}-->
     <attribute name="aux2" type="uint16_t" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::faults}-->
     <attribute name="faults" type="FSBB_Control_faults_t" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::measures[NUM_OF_FSBB_MEASURES]}-->
     <attribute name="measures[NUM_OF_FSBB_MEASURES]" type="uint16_t" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::time_evt_update_measure_request}-->
     <attribute name="time_evt_update_measure_request" type="QTimeEvt" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::time_evt_skiip1_heartbeat_timeou~}-->
     <attribute name="time_evt_skiip1_heartbeat_timeout" type="QTimeEvt" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::time_evt_skiip2_heartbeat_timeou~}-->
     <attribute name="time_evt_skiip2_heartbeat_timeout" type="QTimeEvt" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::skiip1_faults}-->
     <attribute name="skiip1_faults" type="Skiip_CAN_Faults_t" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::skiip2_faults}-->
     <attribute name="skiip2_faults" type="Skiip_CAN_Faults_t" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::Start_Precharge}-->
     <operation name="Start_Precharge" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::Start_Precharge::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::Finish_Precharge}-->
     <operation name="Finish_Precharge" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::Finish_Precharge::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::Change_Control_State}-->
     <operation name="Change_Control_State" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::Change_Control_S~::control_state}-->
      <parameter name="control_state" type="uint16_t"/>
     </operation>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::Open_Contactors}-->
     <operation name="Open_Contactors" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::Open_Contactors::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM}-->
     <statechart properties="0x00">
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::initial}-->
      <initial target="../1">
       <initial_glyph conn="4,8,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Waiting_QF}-->
      <state name="Waiting_QF">
       <documentation>Waiting for QF start states,
temporary state to waiting the kernel.</documentation>
       <entry>QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_running_qf,(void *)0);</entry>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Waiting_QF::RUNNING_QF}-->
       <tran trig="RUNNING_QF" target="../../2">
        <tran_glyph conn="8,10,3,0,10,14">
         <action box="0,-2,11,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,4,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Start}-->
      <state name="Start">
       <documentation>state which sets peripheral and variables.</documentation>
       <entry>//BSP_BKPT;
FSBB_Control_Change_Control_State(me,FSBB_CONTROL_INIT);

CPU2CLA_Message.task_1_watchdog_request = 0;
CPU2CLA_Message.task_2_watchdog_request = 0;

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_init_complete,(void *)0);</entry>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Start::INIT_COMPLETE}-->
       <tran trig="INIT_COMPLETE" target="../../3/10">
        <action>QTimeEvt_armX(
    &amp;me-&gt;time_evt_cla_watchdog,
    (uint16_t) ((CHECK_CLA_WATCHDOG_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
    (uint16_t) ((CHECK_CLA_WATCHDOG_TIME_MS)/(RTOS_TICK_PERIOD_MS))
);

QTimeEvt_armX(
    &amp;me-&gt;time_evt_report_status,
    (uint16_t) ((REPORT_STATUS_PERIOD_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
    (uint16_t) ((REPORT_STATUS_PERIOD_TIME_MS)/(RTOS_TICK_PERIOD_MS))
);

QTimeEvt_armX(
    &amp;me-&gt;time_evt_update_measure_request,
    (uint16_t) ((MEASURE_PERIOD_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
    (uint16_t) ((MEASURE_PERIOD_TIME_MS)/(RTOS_TICK_PERIOD_MS))
);

QTimeEvt_armX(
    &amp;me-&gt;time_evt_skiip1_heartbeat_timeout,
    (uint16_t) ((SKIIP_HEARTBEAT_TIMEOUT_MS)/(RTOS_TICK_PERIOD_MS)),
    (uint16_t) ((SKIIP_HEARTBEAT_TIMEOUT_MS)/(RTOS_TICK_PERIOD_MS))
);

QTimeEvt_armX(
    &amp;me-&gt;time_evt_skiip2_heartbeat_timeout,
    (uint16_t) ((SKIIP_HEARTBEAT_TIMEOUT_MS)/(RTOS_TICK_PERIOD_MS)),
    (uint16_t) ((SKIIP_HEARTBEAT_TIMEOUT_MS)/(RTOS_TICK_PERIOD_MS))
);</action>
        <tran_glyph conn="8,30,3,3,24,-16,22">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,24,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation}-->
      <state name="Operation">
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::RESET}-->
       <tran trig="RESET" target="../10">
        <action>FSBB_Control_Change_Control_State(me,FSBB_CONTROL_INIT);

QTimeEvt_rearm(
    &amp;me-&gt;time_evt_skiip1_heartbeat_timeout,
    SKIIP_HEARTBEAT_TIMEOUT_MS
);

QTimeEvt_rearm(&amp;me-&gt;time_evt_skiip2_heartbeat_timeout,
    SKIIP_HEARTBEAT_TIMEOUT_MS
);</action>
        <tran_glyph conn="36,18,3,3,18">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::SET_FAULT}-->
       <tran trig="SET_FAULT" target="../14">
        <action>AO_Evt_Set_Fault_t const * Evt_Set_Fault = Q_EVT_CAST(AO_Evt_Set_Fault_t);
switch(Evt_Set_Fault-&gt;fault_id){
case FSBB_FAULT_SKIIP1_OVERVOLTAGE:
    me-&gt;faults.skiip1_overvoltage = 1;
    break;
case FSBB_FAULT_SKIIP1_OVERCURRENT:
    me-&gt;faults.skiip1_overcurrent = 1;
    break;
case FSBB_FAULT_SKIIP1_OVERHEAT:
    me-&gt;faults.skiip1_overheat = 1;
    break;
case FSBB_FAULT_SKIIP1_HALT:
    me-&gt;faults.skiip1_halt = 1;
    break;
case FSBB_FAULT_SKIIP2_OVERVOLTAGE:
    me-&gt;faults.skiip2_overvoltage = 1;
    break;
case FSBB_FAULT_SKIIP2_OVERCURRENT:
    me-&gt;faults.skiip2_overcurrent = 1;
    break;
case FSBB_FAULT_SKIIP2_OVERHEAT:
    me-&gt;faults.skiip2_overheat = 1;
    break;
case FSBB_FAULT_SKIIP2_HALT:
    me-&gt;faults.skiip2_halt = 1;
    break;
case FSBB_FAULT_INDUCTOR_OVERHEAT:
    me-&gt;faults.inductor_overheat = 1;
    break;
case FSBB_FAULT_CAPACITOR_OVERHEAT:
    me-&gt;faults.capacitor_overheat = 1;
    break;
case FSBB_FAULT_ERROR_OUT_1:
    me-&gt;faults.error_out_1 = 1;
    break;
case FSBB_FAULT_ERROR_OUT_2:
    me-&gt;faults.error_out_2 = 1;
    break;
case FSBB_FAULT_CLA_1_WATCHDOG_TIMEOUT:
    me-&gt;faults.cla_t1_watchdog_timeout = 1;
    break;
case FSBB_FAULT_CLA_2_WATCHDOG_TIMEOUT:
    me-&gt;faults.cla_t2_watchdog_timeout = 1;
    break;
case FSBB_FAULT_EMERGENCY_SHUTDOWN:
    me-&gt;faults.emergency_shutdown = 1;
    break;
case FSBB_FAULT_SKIIP1_CARDIAC_ARREST:
    me-&gt;faults.skiip1_cardiac_arrest = 1;
    break;
case FSBB_FAULT_SKIIP2_CARDIAC_ARREST:
    me-&gt;faults.skiip2_cardiac_arrest = 1;
    break;
default:
    system_assert(&quot;AO_FSBB_Control&quot;,0);
}</action>
        <tran_glyph conn="36,34,3,3,18">
         <action box="0,-2,11,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::CHANGE_SETPOINT}-->
       <tran trig="CHANGE_SETPOINT">
        <action>//BSP_BKPT;

AO_Evt_Change_Setpoint_t const * Evt_Change_Setpoint =  Q_EVT_CAST(AO_Evt_Change_Setpoint_t);

switch(Evt_Change_Setpoint-&gt;data.setpoint_id){
case IL_CURRENT_SETPOINT:
    me-&gt;setpoints[Evt_Change_Setpoint-&gt;data.setpoint_id] = Evt_Change_Setpoint-&gt;data.setpoint_value*0.1f;
    CPU2CLA_Message.FSBB_IL_Setpoint = me-&gt;setpoints[Evt_Change_Setpoint-&gt;data.setpoint_id];
    break;
case IO_CURRENT_SETPOINT:
    me-&gt;setpoints[Evt_Change_Setpoint-&gt;data.setpoint_id] = Evt_Change_Setpoint-&gt;data.setpoint_value*0.1f;
    break;
case POWER_SETPOINT:
    me-&gt;setpoints[Evt_Change_Setpoint-&gt;data.setpoint_id] = Evt_Change_Setpoint-&gt;data.setpoint_value*0.1f;
    break;
default:
    
    break;
}</action>
        <tran_glyph conn="36,46,3,-1,22">
         <action box="0,-2,18,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::CHECK_CLA_WATCHDOG}-->
       <tran trig="CHECK_CLA_WATCHDOG">
        <action>if(CLA2CPU_Message.task_1_watchdog_response != CPU2CLA_Message.task_1_watchdog_request){
    // CLA Task1 WatchDog Error
    AO_Evt_Set_Fault_t * set_fault_evt = Q_NEW(AO_Evt_Set_Fault_t,SET_FAULT_SIG);
    set_fault_evt-&gt;fault_id = FSBB_FAULT_CLA_1_WATCHDOG_TIMEOUT;
    QACTIVE_POST(&amp;me-&gt;super,&amp;set_fault_evt-&gt;super, (void *) 0);
}
if(CLA2CPU_Message.task_2_watchdog_response != CPU2CLA_Message.task_2_watchdog_request){
    // CLA Task2 WatchDog Error
    AO_Evt_Set_Fault_t * set_fault_evt = Q_NEW(AO_Evt_Set_Fault_t,SET_FAULT_SIG);
    set_fault_evt-&gt;fault_id = FSBB_FAULT_CLA_2_WATCHDOG_TIMEOUT;
    QACTIVE_POST(&amp;me-&gt;super,&amp;set_fault_evt-&gt;super, (void *) 0);
}
CPU2CLA_Message.task_1_watchdog_request++;
CPU2CLA_Message.task_2_watchdog_request++;
</action>
        <tran_glyph conn="36,48,3,-1,22">
         <action box="0,-2,21,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::REPORT_STATUS}-->
       <tran trig="REPORT_STATUS">
        <action>OC_Evt_Aux_Communication_Message_FSBB_Control_Public_Data_t * report_message = Q_NEW( OC_Evt_Aux_Communication_Message_FSBB_Control_Public_Data_t , IPC_SEND_MSG_SIG );
report_message-&gt;super.ID = OC_IPC_CPU1_CM_ID;
report_message-&gt;msg.com_sig = COM_SIG_IPC_CPU1_CM_FSBB_STATUS_REPORT;
report_message-&gt;msg.message_size = sizeof(FSBB_Control_Public_Data_t);
report_message-&gt;msg.payload.faults = me-&gt;faults;

QACTIVE_POST( p_ao_communication , &amp;report_message-&gt;super.super , (void *) 0);
</action>
        <tran_glyph conn="36,50,3,-1,22">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::EMERGENCY_SHUTDOWN, SETTLE_TIMEO~}-->
       <tran trig="EMERGENCY_SHUTDOWN, SETTLE_TIMEOUT, SKIIP1_HEARTBEAT_TIMEOUT, SKIIP2_HEARTBEAT_TIMEOUT" target="../14">
        <action>switch(e-&gt;sig){
case EMERGENCY_SHUTDOWN_SIG:
    me-&gt;faults.emergency_shutdown = 1;
    break;
case SETTLE_TIMEOUT_SIG:
    me-&gt;faults.settle_timeout = 1;
    break;
case SKIIP1_HEARTBEAT_TIMEOUT_SIG:
    me-&gt;faults.skiip1_cardiac_arrest = 1;
    break;
case SKIIP2_HEARTBEAT_TIMEOUT_SIG:
    me-&gt;faults.skiip2_cardiac_arrest = 1;
    break;
default:
    break;
}</action>
        <tran_glyph conn="36,36,3,3,18">
         <action box="0,-2,15,4"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::SET_MULTIPLE_FAULTS}-->
       <tran trig="SET_MULTIPLE_FAULTS" target="../14">
        <action>AO_Evt_Set_Multiple_Faults_t const * mult_fault = Q_EVT_CAST(AO_Evt_Set_Multiple_Faults_t);

typedef union{
    FSBB_Control_faults_t faults;
    uint16_t data[sizeof(FSBB_Control_faults_t)];
}FSBB_Control_faults_aux_t;

FSBB_Control_faults_aux_t * p_aux1 = (FSBB_Control_faults_aux_t *) &amp;me-&gt;faults;
FSBB_Control_faults_aux_t * p_aux2 = (FSBB_Control_faults_aux_t *) &amp;mult_fault-&gt;faults;

for(uint16_t faults_index = 0;
    faults_index &lt; sizeof(FSBB_Control_faults_t);
    faults_index++){
    p_aux1-&gt;data[faults_index] |= p_aux2-&gt;data[faults_index];
}
</action>
        <tran_glyph conn="36,42,3,3,18">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::SKIIP1_HEART_BEAT, SKIIP2_HEART_~}-->
       <tran trig="SKIIP1_HEART_BEAT, SKIIP2_HEART_BEAT">
        <action>switch(e-&gt;sig){
case SKIIP1_HEART_BEAT_SIG:
    QTimeEvt_rearm(
        &amp;me-&gt;time_evt_skiip1_heartbeat_timeout,
        SKIIP_HEARTBEAT_TIMEOUT_MS
    );
    break;
case SKIIP2_HEART_BEAT_SIG:
    QTimeEvt_rearm(
        &amp;me-&gt;time_evt_skiip2_heartbeat_timeout,
        SKIIP_HEARTBEAT_TIMEOUT_MS
    );
    break;
}</action>
        <tran_glyph conn="36,54,3,-1,22">
         <action box="0,-2,16,4"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::UPDATE_MEASURE}-->
       <tran trig="UPDATE_MEASURE">
        <action>
AO_Evt_FSBB_Measure_Update_t const * evt_update_measure =  Q_EVT_CAST(AO_Evt_FSBB_Measure_Update_t);

switch(evt_update_measure-&gt;data.measure_id){
case FSBB_MEASURE_SKIIP1_DCB_TEMPERATURE:
case FSBB_MEASURE_SKIIP1_PCB_TEMPERATURE:
case FSBB_MEASURE_SKIIP2_DCB_TEMPERATURE:
case FSBB_MEASURE_SKIIP2_PCB_TEMPERATURE:
    me-&gt;measures[evt_update_measure-&gt;data.measure_id] = evt_update_measure-&gt;data.measure-2731;
    break;
default:
    system_assert(&quot;fsbb_control&quot;, 0);
    break;
}</action>
        <tran_glyph conn="36,60,3,-1,22">
         <action box="0,-2,20,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::UPDATE_SKIIP1_FALTS,UPDATE_SKIIP~}-->
       <tran trig="UPDATE_SKIIP1_FALTS,UPDATE_SKIIP2_FALTS">
        <tran_glyph conn="36,62,3,-1,22">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Uncharged}-->
       <state name="Uncharged">
        <documentation>this state waits the command to charge the  capacitors.</documentation>
        <entry>//BSP_BKPT;</entry>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Uncharged::PRECHARGE_START}-->
        <tran trig="PRECHARGE_START" target="../../11">
         <action>//BSP_BKPT;</action>
         <tran_glyph conn="54,16,3,3,30">
          <action box="0,-2,18,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="54,10,20,12">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Precharge}-->
       <state name="Precharge">
        <documentation>waiting the capacitors charge.</documentation>
        <entry>FSBB_Control_Start_Precharge(me,e);
me-&gt;aux1 = CLA2CPU_Message.skiip1_voltage;
me-&gt;aux2 = CLA2CPU_Message.skiip2_voltage;

// Execute precharge
QTimeEvt_armX(&amp;me-&gt;time_evt_check_params,
(uint16_t) ((CHECK_PARAMS_PRECHARGE_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
(uint16_t) ((CHECK_PARAMS_PRECHARGE_TIME_MS)/(RTOS_TICK_PERIOD_MS))
);</entry>
        <exit>QTimeEvt_disarm(&amp;me-&gt;time_evt_check_params);</exit>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Precharge::CHECK_PARAMS}-->
        <tran trig="CHECK_PARAMS">
         <action>if(
    ((me-&gt;aux1-CLA2CPU_Message.skiip1_voltage) &lt; MIN_DELTA_V_PRECHARGE_FINISH) &amp;&amp;
    ((me-&gt;aux2-CLA2CPU_Message.skiip2_voltage) &lt; MIN_DELTA_V_PRECHARGE_FINISH)
){
    QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_precharge_finish,(void *)0);
}

me-&gt;aux1 = CLA2CPU_Message.skiip1_voltage;
me-&gt;aux2 = CLA2CPU_Message.skiip2_voltage;</action>
         <tran_glyph conn="84,18,3,-1,16">
          <action box="0,-2,13,2"/>
         </tran_glyph>
        </tran>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Precharge::PRECHARGE_FINISH}-->
        <tran trig="PRECHARGE_FINISH" target="../../12">
         <action>FSBB_Control_Finish_Precharge(me,e);</action>
         <tran_glyph conn="84,20,3,1,22,14,-2">
          <action box="0,-2,16,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="84,10,20,12">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Idle}-->
       <state name="Idle">
        <documentation>waiting the command to start the control</documentation>
        <entry>FSBB_Control_Change_Control_State(me,FSBB_CONTROL_STOPPED);</entry>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Idle::START_CONTROL}-->
        <tran trig="START_CONTROL" target="../../13">
         <tran_glyph conn="84,38,3,3,32">
          <action box="0,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="84,30,20,12">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Running}-->
       <state name="Running">
        <documentation>controlling the current, using the setpoint, passed by the CAN Network.</documentation>
        <entry>FSBB_Control_Change_Control_State(me,FSBB_CONTROL_RUNNING);</entry>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Running::STOP_CONTROL}-->
        <tran trig="STOP_CONTROL" target="../../16">
         <tran_glyph conn="116,36,3,1,22,18,-2">
          <action box="0,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="116,30,20,12">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Fault}-->
       <state name="Fault">
        <documentation>set faults,</documentation>
        <entry>FSBB_Control_Change_Control_State(me,FSBB_CONTROL_ERROR);

FSBB_Control_Open_Contactors(me,e);

//BSP_BKPT;</entry>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Fault::CLEAR_FAULT}-->
        <tran trig="CLEAR_FAULT" target="../../10">
         <action>FSBB_Control_Change_Control_State(me,FSBB_CONTROL_STOPPED);
FSBB_Control_faults_t aux = {0};
me-&gt;faults = aux;

QTimeEvt_rearm(
    &amp;me-&gt;time_evt_skiip1_heartbeat_timeout,
    SKIIP_HEARTBEAT_TIMEOUT_MS
);

QTimeEvt_rearm(
    &amp;me-&gt;time_evt_skiip2_heartbeat_timeout,
    SKIIP_HEARTBEAT_TIMEOUT_MS
);</action>
         <tran_glyph conn="54,36,3,2,18,-14">
          <action box="0,-2,11,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="54,30,20,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle_2}-->
       <state name="To_Idle_2">
        <documentation>Deactivate the control and waints the current reach zero.</documentation>
        <entry>FSBB_Control_Change_Control_State(me,FSBB_CONTROL_STOPING);

QTimeEvt_armX(&amp;me-&gt;time_evt_check_params,
(uint16_t) ((CHECK_PARAMS_IL_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
(uint16_t) ((CHECK_PARAMS_IL_TIME_MS)/(RTOS_TICK_PERIOD_MS))
);

// Time Limit to this state
// if this limit is exceeded, a error is triggered

QTimeEvt_armX(&amp;me-&gt;time_evt_settle,
(uint16_t) ((MAX_SETTLE_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
0
);</entry>
        <exit>// Deactivate the time events of this State
QTimeEvt_disarm(&amp;me-&gt;time_evt_check_params);
QTimeEvt_disarm(&amp;me-&gt;time_evt_settle);</exit>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle_2::CHECK_PARAMS}-->
        <tran trig="CHECK_PARAMS">
         <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle_2::CHECK_PARAMS::[abs(CLA2CPU_Message.skiip1_curr~}-->
         <choice target="../../../12">
          <guard>abs(CLA2CPU_Message.skiip1_current) &lt; IL_MIN_OPEN</guard>
          <choice_glyph conn="89,54,5,3,-7,-14,2">
           <action box="-5,0,4,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="104,54,1,-1,-15">
          <action box="-14,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="84,50,20,12">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle_1}-->
       <state name="To_Idle_1">
        <documentation>Controlling the Current to Zero.</documentation>
        <entry>CPU2CLA_Message.FSBB_IL_Setpoint = 0;

#ifdef FORCE_DUTY_CICLE
    CPU2CLA_Message.duty_cicle_vin  = 0;
    CPU2CLA_Message.duty_cicle_vout = 0;
#endif

QTimeEvt_armX(&amp;me-&gt;time_evt_check_params,
(uint16_t) ((CHECK_PARAMS_IL_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
(uint16_t) ((CHECK_PARAMS_IL_TIME_MS)/(RTOS_TICK_PERIOD_MS))
);

// Time Limit to this state
// if this limit is exceeded, a error is triggered

QTimeEvt_armX(&amp;me-&gt;time_evt_settle,
(uint16_t) ((MAX_SETTLE_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
0
);</entry>
        <exit>// Deactivate the time events of this State
QTimeEvt_disarm(&amp;me-&gt;time_evt_check_params);
QTimeEvt_disarm(&amp;me-&gt;time_evt_settle);</exit>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle_1::CHECK_PARAMS}-->
        <tran trig="CHECK_PARAMS">
         <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle_1::CHECK_PARAMS::[abs(CLA2CPU_Message.skiip1_curr~}-->
         <choice target="../../../15">
          <guard>abs(CLA2CPU_Message.skiip1_current) &lt; IL_MIN_STOP</guard>
          <choice_glyph conn="120,56,5,1,-16">
           <action box="-4,0,4,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="136,56,1,-1,-16">
          <action box="-14,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="116,50,20,12">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="36,4,108,72"/>
      </state>
      <state_diagram size="156,124"/>
     </statechart>
    </class>
    <!--${CPU1::AOs::AO_FSBB_Control::inst_ao_fsbb_control}-->
    <attribute name="inst_ao_fsbb_control" type="FSBB_Control" visibility="0x01" properties="0x00"/>
    <!--${CPU1::AOs::AO_FSBB_Control::globals}-->
    <package name="globals" stereotype="0x00">
     <!--${CPU1::AOs::AO_FSBB_Control::globals::p_ao_fsbb_control}-->
     <attribute name="p_ao_fsbb_control" type="QActive * const" visibility="0x00" properties="0x00">
      <code>= &amp;inst_ao_fsbb_control.super;</code>
     </attribute>
     <!--${CPU1::AOs::AO_FSBB_Control::globals::ao_fsbb_control_ctor}-->
     <operation name="ao_fsbb_control_ctor" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_FSBB_Control::globals::ao_fsbb_control_~::pAO}-->
      <parameter name="pAO" type="const QActive  * const"/>
      <code>// Active Objects
FSBB_Control * const me = (FSBB_Control *) pAO;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;FSBB_Control_initial));

// Time Events
QTimeEvt_ctorX(&amp;me-&gt;time_evt_check_params             , &amp;me-&gt;super        , CHECK_PARAMS_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;time_evt_cla_watchdog             , &amp;me-&gt;super        , CHECK_CLA_WATCHDOG_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;time_evt_settle                   , &amp;me-&gt;super        , SETTLE_TIMEOUT_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;time_evt_report_status            , &amp;me-&gt;super        , REPORT_STATUS_SIG, 0U);

QTimeEvt_ctorX(&amp;me-&gt;time_evt_skiip1_heartbeat_timeout , &amp;me-&gt;super        , SKIIP1_HEARTBEAT_TIMEOUT_SIG , 0U);
QTimeEvt_ctorX(&amp;me-&gt;time_evt_skiip2_heartbeat_timeout , &amp;me-&gt;super        , SKIIP2_HEARTBEAT_TIMEOUT_SIG , 0U);

QTimeEvt_ctorX(&amp;me-&gt;time_evt_update_measure_request   , p_ao_communication, UPDATE_MEASURE_REQUEST_SIG, 0U);

// Vars
AO_Evt_Set_Multiple_Faults_t aux = {0};
me-&gt;faults = aux.faults;</code>
     </operation>
    </package>
   </package>
   <!--${CPU1::AOs::AO_Communication}-->
   <package name="AO_Communication" stereotype="0x00">
    <!--${CPU1::AOs::AO_Communication::Communication}-->
    <class name="Communication" superclass="qpc::QActive">
     <!--${CPU1::AOs::AO_Communication::Communication::ipc_inst[OC_IPC_NUM_OF_INST]}-->
     <attribute name="ipc_inst[OC_IPC_NUM_OF_INST]" type="OC_IPC" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_Communication::Communication::can_inst[OC_CAN_NUM_OF_INST]}-->
     <attribute name="can_inst[OC_CAN_NUM_OF_INST]" type="OC_CAN" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_Communication::Communication::ipc_process_msg}-->
     <operation name="ipc_process_msg" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_Communication::Communication::ipc_process_msg::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CPU1::AOs::AO_Communication::Communication::can_process_msg}-->
     <operation name="can_process_msg" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_Communication::Communication::can_process_msg::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CPU1::AOs::AO_Communication::Communication::update_measure_request}-->
     <operation name="update_measure_request" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_Communication::Communication::update_measure_r~::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CPU1::AOs::AO_Communication::Communication::skiip_can_open_config}-->
     <operation name="skiip_can_open_config" type="void" visibility="0x00" properties="0x00"/>
     <!--${CPU1::AOs::AO_Communication::Communication::SM}-->
     <statechart properties="0x00">
      <!--${CPU1::AOs::AO_Communication::Communication::SM::initial}-->
      <initial target="../1">
       <initial_glyph conn="4,8,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${CPU1::AOs::AO_Communication::Communication::SM::Waiting_QF}-->
      <state name="Waiting_QF">
       <entry>#ifdef DUALCORE
QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CPU2_ID].super) , (void *)0, (void *)0 );
#endif

QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CM_ID  ].super) , (void *)0, (void *)0 );

QASM_INIT( &amp;(me-&gt;can_inst[OC_CAN_CAN_SKIIP_ID].super)   , (void *)0, (void *)0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_running_qf,(void *)0);</entry>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Waiting_QF::RUNNING_QF}-->
       <tran trig="RUNNING_QF" target="../../2">
        <tran_glyph conn="8,10,3,0,10,16">
         <action box="0,-2,12,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,4,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU1::AOs::AO_Communication::Communication::SM::Start}-->
      <state name="Start">
       <entry>#ifdef DUALCORE
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CPU2_ID].super) ,&amp;im_evt_running_qf, (void *) 0 );
#endif

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CM_ID]  .super) ,&amp;im_evt_running_qf, (void *) 0 );

QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_CAN_SKIIP_ID].super),&amp;im_evt_running_qf, (void *) 0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_init_complete,(void *)0);</entry>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Start::INIT_COMPLETE}-->
       <tran trig="INIT_COMPLETE" target="../../3">
        <action>#ifdef DUALCORE
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CPU2_ID].super) ,&amp;im_evt_init_complete, (void *) 0 );
#endif
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CM_ID]  .super) ,&amp;im_evt_init_complete, (void *) 0 );

QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_CAN_SKIIP_ID].super),&amp;im_evt_init_complete, (void *) 0 );

Communication_skiip_can_open_config(me);</action>
        <tran_glyph conn="8,32,3,3,28">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,26,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation}-->
      <state name="Operation">
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation::IPC_RECEIVE_MSG}-->
       <tran trig="IPC_RECEIVE_MSG">
        <action>uint16_t id = Q_EVT_CAST(OC_Evt)-&gt;ID;

if(id&gt;OC_IPC_NUM_OF_INST) system_assert(__FILE__,0);

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[id].super) ,e, (void *) 0 );

Communication_ipc_process_msg(me,e);</action>
        <tran_glyph conn="36,10,3,-1,16">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation::IPC_FULL_BUS, IPC_RESET_CH, IPC_~}-->
       <tran trig="IPC_FULL_BUS, IPC_RESET_CH, IPC_REMOTE_RESET, IPC_RESET_COMPLETE, IPC_SEND_MSG">
        <action>uint16_t id = Q_EVT_CAST(OC_Evt)-&gt;ID;

if(id&gt;OC_IPC_NUM_OF_INST) system_assert(__FILE__,0);

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[id].super) ,e, (void *) 0 );</action>
        <tran_glyph conn="36,12,3,-1,16">
         <action box="0,-2,18,9"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation::CAN_RECEIVE_MSG}-->
       <tran trig="CAN_RECEIVE_MSG">
        <action>//BSP_BKPT;

uint16_t id = Q_EVT_CAST(OC_Evt)-&gt;ID;
if(id&gt;OC_CAN_NUM_OF_INST) system_assert(__FILE__,0);

QASM_DISPATCH( &amp;(me-&gt;can_inst[id].super) ,e, (void *) 0 );

Communication_can_process_msg(me,e);</action>
        <tran_glyph conn="36,22,3,-1,16">
         <action box="0,-2,16,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation::CAN_SEND_MSG, CAN_BUS_OFF, CAN_P~}-->
       <tran trig="CAN_SEND_MSG, CAN_BUS_OFF, CAN_PASSIVE_ERROR, CAN_ERROR_CLEAR">
        <action>uint16_t id = Q_EVT_CAST(OC_Evt)-&gt;ID;

if(id&gt;OC_CAN_NUM_OF_INST) system_assert(__FILE__,0);

QASM_DISPATCH( &amp;(me-&gt;can_inst[id].super) ,e, (void *) 0 );</action>
        <tran_glyph conn="36,24,3,-1,16">
         <action box="0,-2,17,7"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation::UPDATE_MEASURE_REQUEST}-->
       <tran trig="UPDATE_MEASURE_REQUEST">
        <action>Communication_update_measure_request(me,e);</action>
        <tran_glyph conn="36,48,3,-1,22">
         <action box="0,-2,23,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,4,38,50"/>
      </state>
      <state_diagram size="82,68"/>
     </statechart>
    </class>
    <!--${CPU1::AOs::AO_Communication::inst_ao_communication}-->
    <attribute name="inst_ao_communication" type="Communication" visibility="0x01" properties="0x00"/>
    <!--${CPU1::AOs::AO_Communication::globals}-->
    <package name="globals" stereotype="0x00">
     <!--${CPU1::AOs::AO_Communication::globals::p_ao_communication}-->
     <attribute name="p_ao_communication" type="QActive * const" visibility="0x00" properties="0x00">
      <code>= &amp;inst_ao_communication.super;</code>
     </attribute>
     <!--${CPU1::AOs::AO_Communication::globals::ao_communication_ctor}-->
     <operation name="ao_communication_ctor" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_Communication::globals::ao_communication~::pAO}-->
      <parameter name="pAO" type="const QActive  * const"/>
      <code>Communication * const me = (Communication *) pAO;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Communication_initial));

// Orthogonal Components

#ifdef DUALCORE
OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CPU1_CPU2_ID] ,&amp;me-&gt;super, OC_IPC_CPU1_CPU2_ID);
#endif
OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CPU1_CM_ID  ] ,&amp;me-&gt;super, OC_IPC_CPU1_CM_ID  );

OC_CAN_ctor(&amp;me-&gt;can_inst[OC_CAN_CAN_SKIIP_ID] ,&amp;me-&gt;super, OC_CAN_CAN_SKIIP_ID);</code>
     </operation>
    </package>
   </package>
  </package>
  <!--${CPU1::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${CPU1::Signals::private_signals}-->
   <attribute name="private_signals" type="enum" visibility="0x04" properties="0x00">
    <code>{
// Publish Subscribe Signals
    TIMEOUT_SIG = Q_USER_SIG,

    // - Only PRIVATE

    MAX_PUB_SIG,

    // COMMON Signals
    RUNNING_QF_SIG,
    INIT_COMPLETE_SIG,
    REPORT_STATUS_SIG,

    //FSBB Signals
    PRECHARGE_START_SIG,
    PRECHARGE_FINISH_SIG,
    START_CONTROL_SIG,
    STOP_CONTROL_SIG,

    RESET_SIG,

    SET_FAULT_SIG,
    EMERGENCY_SHUTDOWN_SIG,
    SETTLE_TIMEOUT_SIG,
    SKIIP1_HEARTBEAT_TIMEOUT_SIG,
    SKIIP2_HEARTBEAT_TIMEOUT_SIG,
    SET_MULTIPLE_FAULTS_SIG,

    UPDATE_SKIIP1_FALTS_SIG,
    UPDATE_SKIIP2_FALTS_SIG,

    CLEAR_FAULT_SIG,
    CHANGE_SETPOINT_SIG,

    CHECK_CLA_WATCHDOG_SIG,
    SKIIP1_HEART_BEAT_SIG,
    SKIIP2_HEART_BEAT_SIG,
    CHECK_PARAMS_SIG,

    UPDATE_MEASURE_REQUEST_SIG,
    UPDATE_MEASURE_SIG,


    // CAN OC Signals
    OC_CAN_SIGNALS,

    // IPC OC Signals
    OC_IPC_SIGNALS,


    MAX_PRIVATE_SIG,
};</code>
   </attribute>
   <!--${CPU1::Signals::com_signals_ipc_cpu2_cpu1[COM_SI~}-->
   <attribute name="com_signals_ipc_cpu2_cpu1[COM_SIG_IPC_CPU2_CPU1_MAX]" type="com_tag_t" visibility="0x00" properties="0x00">
    <code>={
};</code>
   </attribute>
   <!--${CPU1::Signals::com_signals_ipc_cm_cpu1[COM_SIG_~}-->
   <attribute name="com_signals_ipc_cm_cpu1[COM_SIG_IPC_CM_CPU1_MAX]" type="com_tag_t" visibility="0x00" properties="0x00">
    <code>={
    [COM_SIG_IPC_CM_CPU1_CONTROL_START] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_start_control,
    },
    [COM_SIG_IPC_CM_CPU1_CONTROL_STOP] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_stop_control,
    },
    [COM_SIG_IPC_CM_CPU1_EMERGENCY_SHUTDOWN] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_start_control,
    },
    [COM_SIG_IPC_CM_CPU1_PRECHARGE_START] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_precharge_start,
    },
    [COM_SIG_IPC_CM_CPU1_RESET] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_reset,
    },
    [COM_SIG_IPC_CM_CPU1_CLEAR_FAULT] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_clear_fault,
    },
    [COM_SIG_IPC_CM_CPU1_CHANGE_SETPOINT] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_change_setpoint,
    },
};</code>
   </attribute>
   <!--${CPU1::Signals::com_signals_can_skiip[COM_SIG_CA~}-->
   <attribute name="com_signals_can_skiip[COM_SIG_CAN_SKIIP_MAX]" type="const com_tag_t" visibility="0x00" properties="0x00">
    <code>={
    [COM_SIG_CAN_SKIIP_1_HEART_BEAT] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_skiip_1_heart_beat,
    },
    [COM_SIG_CAN_SKIIP_2_HEART_BEAT] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_skiip_2_heart_beat,
    },
    [COM_SIG_CAN_SKIIP_UPDATE_MEASURE] = {
        .p_ao = &amp;p_ao_fsbb_control,
        .im_evt = &amp;im_evt_update_measure,
    },
};
</code>
   </attribute>
  </package>
  <!--${CPU1::ao_priority}-->
  <attribute name="ao_priority" type="enum" visibility="0x04" properties="0x00">
   <code>{
    // Priority in ascendance order
    IDLE_TASK=0U,
    AO_COMMUNICATION_PRIO,
    AO_FSBB_CONTROL_PRIO,
};</code>
  </attribute>
  <!--${CPU1::OC_enum}-->
  <package name="OC_enum" stereotype="0x00">
   <!--${CPU1::OC_enum::IPC}-->
   <package name="IPC" stereotype="0x00">
    <!--${CPU1::OC_enum::IPC::ipc_named}-->
    <attribute name="ipc_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
#ifdef DUALCORE
    OC_IPC_CPU1_CPU2_ID,
#endif
    OC_IPC_CPU1_CM_ID,
    OC_IPC_NUM_OF_INST,
};</code>
    </attribute>
   </package>
   <!--${CPU1::OC_enum::CAN}-->
   <package name="CAN" stereotype="0x00">
    <!--${CPU1::OC_enum::CAN::can_named}-->
    <attribute name="can_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_CAN_CAN_SKIIP_ID,
    OC_CAN_NUM_OF_INST,
};</code>
    </attribute>
   </package>
  </package>
  <!--${CPU1::Immutable_Events}-->
  <package name="Immutable_Events" stereotype="0x00">
   <!--${CPU1::Immutable_Events::General}-->
   <package name="General" stereotype="0x00">
    <!--${CPU1::Immutable_Events::General::im_evt_running_qf}-->
    <attribute name="im_evt_running_qf" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(RUNNING_QF_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::General::im_evt_init_complete}-->
    <attribute name="im_evt_init_complete" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(INIT_COMPLETE_SIG);</code>
    </attribute>
   </package>
   <!--${CPU1::Immutable_Events::FSBB}-->
   <package name="FSBB" stereotype="0x00">
    <!--${CPU1::Immutable_Events::FSBB::im_evt_precharge_start}-->
    <attribute name="im_evt_precharge_start" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(PRECHARGE_START_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_precharge_finish}-->
    <attribute name="im_evt_precharge_finish" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(PRECHARGE_FINISH_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_start_control}-->
    <attribute name="im_evt_start_control" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(START_CONTROL_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_stop_control}-->
    <attribute name="im_evt_stop_control" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(STOP_CONTROL_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_reset}-->
    <attribute name="im_evt_reset" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(RESET_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_clear_fault}-->
    <attribute name="im_evt_clear_fault" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(CLEAR_FAULT_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_change_setpoint}-->
    <attribute name="im_evt_change_setpoint" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(CHANGE_SETPOINT_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_skiip_1_heart_beat}-->
    <attribute name="im_evt_skiip_1_heart_beat" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(SKIIP1_HEART_BEAT_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_skiip_2_heart_beat}-->
    <attribute name="im_evt_skiip_2_heart_beat" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(SKIIP2_HEART_BEAT_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_update_measure}-->
    <attribute name="im_evt_update_measure" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(UPDATE_MEASURE_SIG);</code>
    </attribute>
   </package>
   <!--${CPU1::Immutable_Events::Communication}-->
   <package name="Communication" stereotype="0x00">
    <!--${CPU1::Immutable_Events::Communication::IPC}-->
    <package name="IPC" stereotype="0x00">
     <!--${CPU1::Immutable_Events::Communication::IPC::im_evt_ipc_reset_ch[OC_IPC_NUM_O~}-->
     <attribute name="im_evt_ipc_reset_ch[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
#ifdef DUALCORE
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
#endif
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU1::Immutable_Events::Communication::IPC::im_evt_ipc_reset_complete[OC_IPC~}-->
     <attribute name="im_evt_ipc_reset_complete[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
#ifdef DUALCORE
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
#endif
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU1::Immutable_Events::Communication::IPC::im_evt_ipc_full_bus[OC_IPC_NUM_O~}-->
     <attribute name="im_evt_ipc_full_bus[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
#ifdef DUALCORE
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
#endif
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU1::Immutable_Events::Communication::IPC::im_evt_ipc_remote_reset[OC_IPC_N~}-->
     <attribute name="im_evt_ipc_remote_reset[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
#ifdef DUALCORE
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
#endif
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU1::Immutable_Events::Communication::IPC::im_evt_ipc_send_msg[OC_IPC_NUM_O~}-->
     <attribute name="im_evt_ipc_send_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
#ifdef DUALCORE
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
#endif
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU1::Immutable_Events::Communication::IPC::im_evt_ipc_receive_msg[OC_IPC_NU~}-->
     <attribute name="im_evt_ipc_receive_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
#ifdef DUALCORE
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
#endif
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
     </attribute>
    </package>
    <!--${CPU1::Immutable_Events::Communication::CAN}-->
    <package name="CAN" stereotype="0x00">
     <!--${CPU1::Immutable_Events::Communication::CAN::im_evt_can_send_msg[OC_CAN_NUM_O~}-->
     <attribute name="im_evt_can_send_msg[OC_CAN_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_CAN_CAN_SKIIP_ID] = {
        .super = QEVT_INITIALIZER(CAN_SEND_MSG_SIG),
        .ID = OC_CAN_CAN_SKIIP_ID,
    },
};</code>
     </attribute>
    </package>
   </package>
  </package>
 </package>
 <!--${CPU2}-->
 <package name="CPU2" stereotype="0x00">
  <!--${CPU2::AOs}-->
  <package name="AOs" stereotype="0x02">
   <!--${CPU2::AOs::AO_Communication}-->
   <package name="AO_Communication" stereotype="0x00">
    <!--${CPU2::AOs::AO_Communication::Communication}-->
    <class name="Communication" superclass="qpc::QActive">
     <!--${CPU2::AOs::AO_Communication::Communication::ipc_inst[OC_IPC_NUM_OF_INST]}-->
     <attribute name="ipc_inst[OC_IPC_NUM_OF_INST]" type="OC_IPC" visibility="0x02" properties="0x00"/>
     <!--${CPU2::AOs::AO_Communication::Communication::ipc_process_msg}-->
     <operation name="ipc_process_msg" type="void" visibility="0x00" properties="0x00">
      <!--${CPU2::AOs::AO_Communication::Communication::ipc_process_msg::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CPU2::AOs::AO_Communication::Communication::SM}-->
     <statechart properties="0x00">
      <!--${CPU2::AOs::AO_Communication::Communication::SM::initial}-->
      <initial target="../1">
       <initial_glyph conn="4,8,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${CPU2::AOs::AO_Communication::Communication::SM::Waiting_QF}-->
      <state name="Waiting_QF">
       <entry>//BSP_BKPT;

QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CPU1_ID].super) , (void *)0, (void *)0 );
QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CM_ID  ].super) , (void *)0, (void *)0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_running_qf,(void *)0);</entry>
       <!--${CPU2::AOs::AO_Communication::Communication::SM::Waiting_QF::RUNNING_QF}-->
       <tran trig="RUNNING_QF" target="../../2">
        <tran_glyph conn="8,10,3,0,10,16">
         <action box="0,-2,12,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,4,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU2::AOs::AO_Communication::Communication::SM::Start}-->
      <state name="Start">
       <entry>//BSP_BKPT;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CPU1_ID].super) , &amp;im_evt_running_qf, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CM_ID  ].super) , &amp;im_evt_running_qf, (void *) 0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_init_complete,(void *)0);</entry>
       <!--${CPU2::AOs::AO_Communication::Communication::SM::Start::INIT_COMPLETE}-->
       <tran trig="INIT_COMPLETE" target="../../3">
        <action>QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CPU1_ID].super) , &amp;im_evt_init_complete, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CM_ID  ].super) , &amp;im_evt_init_complete, (void *) 0 );</action>
        <tran_glyph conn="8,32,3,3,28">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,26,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU2::AOs::AO_Communication::Communication::SM::Operation}-->
      <state name="Operation">
       <!--${CPU2::AOs::AO_Communication::Communication::SM::Operation::IPC_RECEIVE_MSG}-->
       <tran trig="IPC_RECEIVE_MSG">
        <action>uint16_t ID = Q_EVT_CAST(OC_Evt)-&gt;ID;
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[ID].super) ,e, (void *) 0 );

Communication_ipc_process_msg(me,e);</action>
        <tran_glyph conn="36,10,3,-1,16">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU2::AOs::AO_Communication::Communication::SM::Operation::IPC_FULL_BUS, IPC_RESET_CH, IPC_~}-->
       <tran trig="IPC_FULL_BUS, IPC_RESET_CH, IPC_REMOTE_RESET, IPC_RESET_COMPLETE, IPC_SEND_MSG">
        <action>uint16_t ID = Q_EVT_CAST(OC_Evt)-&gt;ID;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[ID].super) ,e, (void *) 0 );</action>
        <tran_glyph conn="36,12,3,-1,16">
         <action box="0,-2,19,9"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,4,38,46"/>
      </state>
      <state_diagram size="80,59"/>
     </statechart>
    </class>
    <!--${CPU2::AOs::AO_Communication::inst_ao_communication}-->
    <attribute name="inst_ao_communication" type="Communication" visibility="0x01" properties="0x00"/>
    <!--${CPU2::AOs::AO_Communication::globals}-->
    <package name="globals" stereotype="0x00">
     <!--${CPU2::AOs::AO_Communication::globals::p_ao_communication}-->
     <attribute name="p_ao_communication" type="QActive * const" visibility="0x00" properties="0x00">
      <code>= &amp;inst_ao_communication.super;</code>
     </attribute>
     <!--${CPU2::AOs::AO_Communication::globals::ao_communication_ctor}-->
     <operation name="ao_communication_ctor" type="void" visibility="0x00" properties="0x00">
      <!--${CPU2::AOs::AO_Communication::globals::ao_communication~::pAO}-->
      <parameter name="pAO" type="const QActive  * const"/>
      <code>Communication * const me = (Communication *) pAO;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Communication_initial));

// Orthogonal Components

OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CPU2_CPU1_ID] , &amp;me-&gt;super, OC_IPC_CPU2_CPU1_ID);
OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CPU2_CM_ID  ] , &amp;me-&gt;super, OC_IPC_CPU2_CM_ID  );</code>
     </operation>
    </package>
    <!--${CPU2::AOs::AO_Communication::ipc_process_msg}-->
    <operation name="ipc_process_msg" type="void" visibility="0x00" properties="0x00">
     <!--${CPU2::AOs::AO_Communication::ipc_process_msg::e}-->
     <parameter name="e" type="QEvt const * const"/>
    </operation>
   </package>
  </package>
  <!--${CPU2::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${CPU2::Signals::private_signals}-->
   <attribute name="private_signals" type="enum" visibility="0x04" properties="0x00">
    <code>{
// Publish Subscribe Signals
    TIMEOUT_SIG = Q_USER_SIG,

    // - Only PRIVATE

    MAX_PUB_SIG,

    // COMMON Signals
    RUNNING_QF_SIG,
    INIT_COMPLETE_SIG,

    // IPC OC Signals
    OC_IPC_SIGNALS,

    MAX_PRIVATE_SIG,
};</code>
   </attribute>
   <!--${CPU2::Signals::com_signals_ipc_cpu1_cpu2[COM_SI~}-->
   <attribute name="com_signals_ipc_cpu1_cpu2[COM_SIG_IPC_CPU1_CPU2_MAX]" type="com_tag_t" visibility="0x00" properties="0x00">
    <code>={
};</code>
   </attribute>
   <!--${CPU2::Signals::com_signals_ipc_cm_cpu2[COM_SIG_~}-->
   <attribute name="com_signals_ipc_cm_cpu2[COM_SIG_IPC_CM_CPU2_MAX]" type="com_tag_t" visibility="0x00" properties="0x00">
    <code>={
};</code>
   </attribute>
  </package>
  <!--${CPU2::ao_priority}-->
  <attribute name="ao_priority" type="enum" visibility="0x04" properties="0x00">
   <code>{
    // Priority in ascendance order
    IDLE_TASK=0U,
    AO_COMMUNICATION_PRIO,
};</code>
  </attribute>
  <!--${CPU2::OC_enum}-->
  <package name="OC_enum" stereotype="0x00">
   <!--${CPU2::OC_enum::IPC}-->
   <package name="IPC" stereotype="0x00">
    <!--${CPU2::OC_enum::IPC::ipc_named}-->
    <attribute name="ipc_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_IPC_CPU2_CPU1_ID,
    OC_IPC_CPU2_CM_ID,
    OC_IPC_NUM_OF_INST,
};</code>
    </attribute>
   </package>
  </package>
  <!--${CPU2::Immutable_Events}-->
  <package name="Immutable_Events" stereotype="0x00">
   <!--${CPU2::Immutable_Events::General}-->
   <package name="General" stereotype="0x00">
    <!--${CPU2::Immutable_Events::General::im_evt_running_qf}-->
    <attribute name="im_evt_running_qf" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(RUNNING_QF_SIG);</code>
    </attribute>
    <!--${CPU2::Immutable_Events::General::im_evt_init_complete}-->
    <attribute name="im_evt_init_complete" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(INIT_COMPLETE_SIG);</code>
    </attribute>
   </package>
   <!--${CPU2::Immutable_Events::Communication}-->
   <package name="Communication" stereotype="0x00">
    <!--${CPU2::Immutable_Events::Communication::IPC}-->
    <package name="IPC" stereotype="0x00">
     <!--${CPU2::Immutable_Events::Communication::IPC::im_evt_ipc_reset_complete[OC_IPC~}-->
     <attribute name="im_evt_ipc_reset_complete[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU2::Immutable_Events::Communication::IPC::im_evt_ipc_reset_ch[OC_IPC_NUM_O~}-->
     <attribute name="im_evt_ipc_reset_ch[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU2::Immutable_Events::Communication::IPC::im_evt_ipc_full_bus[OC_IPC_NUM_O~}-->
     <attribute name="im_evt_ipc_full_bus[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU2::Immutable_Events::Communication::IPC::im_evt_ipc_remote_reset[OC_IPC_N~}-->
     <attribute name="im_evt_ipc_remote_reset[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU2::Immutable_Events::Communication::IPC::im_evt_ipc_receive_msg[OC_IPC_NU~}-->
     <attribute name="im_evt_ipc_receive_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
     </attribute>
     <!--${CPU2::Immutable_Events::Communication::IPC::im_evt_ipc_send_msg[OC_IPC_NUM_O~}-->
     <attribute name="im_evt_ipc_send_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
     </attribute>
    </package>
   </package>
  </package>
 </package>
 <!--${CM}-->
 <package name="CM" stereotype="0x00">
  <!--${CM::AOs}-->
  <package name="AOs" stereotype="0x02">
   <!--${CM::AOs::AO_Communication}-->
   <package name="AO_Communication" stereotype="0x00">
    <!--${CM::AOs::AO_Communication::Communication}-->
    <class name="Communication" superclass="qpc::QActive">
     <!--${CM::AOs::AO_Communication::Communication::ipc_inst[OC_IPC_NUM_OF_INST]}-->
     <attribute name="ipc_inst[OC_IPC_NUM_OF_INST]" type="OC_IPC" visibility="0x02" properties="0x00"/>
     <!--${CM::AOs::AO_Communication::Communication::can_inst[OC_CAN_NUM_OF_INST]}-->
     <attribute name="can_inst[OC_CAN_NUM_OF_INST]" type="OC_CAN" visibility="0x02" properties="0x00"/>
     <!--${CM::AOs::AO_Communication::Communication::sys_data}-->
     <attribute name="sys_data" type="System_Public_Data_t" visibility="0x02" properties="0x00"/>
     <!--${CM::AOs::AO_Communication::Communication::time_evt_can_periodic_message}-->
     <attribute name="time_evt_can_periodic_message" type="QTimeEvt" visibility="0x02" properties="0x00"/>
     <!--${CM::AOs::AO_Communication::Communication::ipc_process_msg}-->
     <operation name="ipc_process_msg" type="void" visibility="0x00" properties="0x00">
      <!--${CM::AOs::AO_Communication::Communication::ipc_process_msg::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CM::AOs::AO_Communication::Communication::can_process_msg}-->
     <operation name="can_process_msg" type="void" visibility="0x00" properties="0x00">
      <!--${CM::AOs::AO_Communication::Communication::can_process_msg::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CM::AOs::AO_Communication::Communication::Can_Periodic_Msg}-->
     <operation name="Can_Periodic_Msg" type="void" visibility="0x00" properties="0x00">
      <!--${CM::AOs::AO_Communication::Communication::Can_Periodic_Msg::e}-->
      <parameter name="e" type="QEvt const * const"/>
     </operation>
     <!--${CM::AOs::AO_Communication::Communication::SM}-->
     <statechart properties="0x00">
      <!--${CM::AOs::AO_Communication::Communication::SM::initial}-->
      <initial target="../1">
       <initial_glyph conn="4,8,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${CM::AOs::AO_Communication::Communication::SM::Waiting_QF}-->
      <state name="Waiting_QF">
       <entry>//BSP_BKPT;

QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU1_ID].super) , (void *)0, (void *)0 );

#ifdef DUALCORE
QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU2_ID].super) , (void *)0, (void *)0 );
#endif

QASM_INIT( &amp;(me-&gt;can_inst[OC_CAN_CAN_PUBLIC_ID].super) , (void *)0, (void *)0 );
//QASM_INIT( &amp;(me-&gt;can_inst[OC_CAN_MCAN_ID].super) , (void *)0, (void *)0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_running_qf,(void *)0);</entry>
       <!--${CM::AOs::AO_Communication::Communication::SM::Waiting_QF::RUNNING_QF}-->
       <tran trig="RUNNING_QF" target="../../2">
        <tran_glyph conn="8,10,3,0,10,16">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,4,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CM::AOs::AO_Communication::Communication::SM::Start}-->
      <state name="Start">
       <entry>QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU1_ID].super) , &amp;im_evt_running_qf, (void *) 0 );

#ifdef DUALCORE
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU2_ID].super) , &amp;im_evt_running_qf, (void *) 0 );
#endif

QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_CAN_PUBLIC_ID].super) , &amp;im_evt_running_qf, (void *) 0 );
//QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_MCAN_ID].super) , &amp;im_evt_running_qf, (void *) 0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_init_complete,(void *)0);</entry>
       <!--${CM::AOs::AO_Communication::Communication::SM::Start::INIT_COMPLETE}-->
       <tran trig="INIT_COMPLETE" target="../../3">
        <action>QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU1_ID].super) , &amp;im_evt_init_complete, (void *) 0 );

#ifdef DUALCORE
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU2_ID].super) , &amp;im_evt_init_complete, (void *) 0 );
#endif

QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_CAN_PUBLIC_ID].super) , &amp;im_evt_init_complete, (void *) 0 );
//QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_MCAN_ID].super) , &amp;im_evt_init_complete, (void *) 0 );

// Time Events

QTimeEvt_armX(&amp;me-&gt;time_evt_can_periodic_message,
(uint16_t) ((CAN_PERIODIC_MSG_TIME_MS)/(RTOS_TICK_PERIOD_MS)),
(uint16_t) ((CAN_PERIODIC_MSG_TIME_MS)/(RTOS_TICK_PERIOD_MS))
);</action>
        <tran_glyph conn="8,32,3,3,28">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,26,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CM::AOs::AO_Communication::Communication::SM::Operation}-->
      <state name="Operation">
       <!--${CM::AOs::AO_Communication::Communication::SM::Operation::IPC_RECEIVE_MSG}-->
       <tran trig="IPC_RECEIVE_MSG">
        <action>//BSP_BKPT;

uint16_t id = Q_EVT_CAST(OC_Evt)-&gt;ID;
if(id&gt;OC_IPC_NUM_OF_INST) system_assert(__FILE__,0);
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[id].super) ,e, (void *) 0 );

Communication_ipc_process_msg(me,e);</action>
        <tran_glyph conn="36,10,3,-1,18">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${CM::AOs::AO_Communication::Communication::SM::Operation::IPC_FULL_BUS, IPC_RESET_CH, IPC_~}-->
       <tran trig="IPC_FULL_BUS, IPC_RESET_CH, IPC_REMOTE_RESET, IPC_RESET_COMPLETE, IPC_SEND_MSG">
        <action>uint16_t id = Q_EVT_CAST(OC_Evt)-&gt;ID;
if(id&gt;OC_IPC_NUM_OF_INST) system_assert(__FILE__,0);
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[id].super) ,e, (void *) 0 );</action>
        <tran_glyph conn="36,12,3,-1,18">
         <action box="0,-2,19,9"/>
        </tran_glyph>
       </tran>
       <!--${CM::AOs::AO_Communication::Communication::SM::Operation::CAN_RECEIVE_MSG}-->
       <tran trig="CAN_RECEIVE_MSG">
        <action>//BSP_BKPT;

uint16_t id = Q_EVT_CAST(OC_Evt)-&gt;ID;
if(id&gt;OC_CAN_NUM_OF_INST) system_assert(__FILE__,0);
QASM_DISPATCH( &amp;(me-&gt;can_inst[id].super) ,e, (void *) 0 );

Communication_can_process_msg(me,e);</action>
        <tran_glyph conn="36,22,3,-1,18">
         <action box="0,-2,16,2"/>
        </tran_glyph>
       </tran>
       <!--${CM::AOs::AO_Communication::Communication::SM::Operation::CAN_SEND_MSG, CAN_BUS_OFF, CAN_P~}-->
       <tran trig="CAN_SEND_MSG, CAN_BUS_OFF, CAN_PASSIVE_ERROR, CAN_ERROR_CLEAR">
        <action>uint16_t id = Q_EVT_CAST(OC_Evt)-&gt;ID;
if(id&gt;OC_CAN_NUM_OF_INST) system_assert(__FILE__,0);
QASM_DISPATCH( &amp;(me-&gt;can_inst[id].super) ,e, (void *) 0 );</action>
        <tran_glyph conn="36,24,3,-1,18">
         <action box="0,-2,17,7"/>
        </tran_glyph>
       </tran>
       <!--${CM::AOs::AO_Communication::Communication::SM::Operation::UPDATE_FSBB_DATA}-->
       <tran trig="UPDATE_FSBB_DATA">
        <action>//BSP_BKPT;

const AO_Evt_Update_FSBB_Data_t * fsbb_public_data = Q_EVT_CAST(AO_Evt_Update_FSBB_Data_t);
me-&gt;sys_data.fsbb_data = fsbb_public_data-&gt;data;</action>
        <tran_glyph conn="36,54,3,-1,18">
         <action box="0,-2,17,2"/>
        </tran_glyph>
       </tran>
       <!--${CM::AOs::AO_Communication::Communication::SM::Operation::CAN_PERIODIC_MESSAGE}-->
       <tran trig="CAN_PERIODIC_MESSAGE">
        <action>Communication_Can_Periodic_Msg(me,e);</action>
        <tran_glyph conn="36,36,3,-1,18">
         <action box="0,-2,20,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,4,54,62"/>
      </state>
      <state_diagram size="96,70"/>
     </statechart>
    </class>
    <!--${CM::AOs::AO_Communication::inst_ao_communication}-->
    <attribute name="inst_ao_communication" type="Communication" visibility="0x01" properties="0x00"/>
    <!--${CM::AOs::AO_Communication::globals}-->
    <package name="globals" stereotype="0x00">
     <!--${CM::AOs::AO_Communication::globals::p_ao_communication}-->
     <attribute name="p_ao_communication" type="QActive * const" visibility="0x00" properties="0x00">
      <code>= &amp;inst_ao_communication.super;</code>
     </attribute>
     <!--${CM::AOs::AO_Communication::globals::ao_communication_ctor}-->
     <operation name="ao_communication_ctor" type="void" visibility="0x00" properties="0x00">
      <!--${CM::AOs::AO_Communication::globals::ao_communication~::pAO}-->
      <parameter name="pAO" type="const QActive  * const"/>
      <code>// Active Object

Communication * const me = (Communication *) pAO;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Communication_initial));

// Time Events

QTimeEvt_ctorX( &amp;me-&gt;time_evt_can_periodic_message,
                &amp;me-&gt;super,
                CAN_PERIODIC_MESSAGE_SIG, 0U);

// Orthogonal Components

OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CM_CPU1_ID] , &amp;me-&gt;super, OC_IPC_CM_CPU1_ID);
#ifdef DUALCORE
OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CM_CPU2_ID] , &amp;me-&gt;super, OC_IPC_CM_CPU2_ID);
#endif
OC_CAN_ctor(&amp;me-&gt;can_inst[OC_CAN_CAN_PUBLIC_ID] ,&amp;me-&gt;super, OC_CAN_CAN_PUBLIC_ID);
//OC_CAN_ctor(&amp;me-&gt;can_inst[OC_CAN_MCAN_ID] ,&amp;me-&gt;super, OC_CAN_MCAN_ID);

System_Public_Data_t aux = {0};
me-&gt;sys_data = aux;</code>
     </operation>
    </package>
   </package>
  </package>
  <!--${CM::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${CM::Signals::private_signals}-->
   <attribute name="private_signals" type="enum" visibility="0x04" properties="0x00">
    <code>{
// Publish Subscribe Signals
    TIMEOUT_SIG = Q_USER_SIG,

    // - Only PRIVATE

    MAX_PUB_SIG,

    // COMMON Signals
    RUNNING_QF_SIG,
    INIT_COMPLETE_SIG,
    UPDATE_FSBB_DATA_SIG,
    CAN_PERIODIC_MESSAGE_SIG,

    // CAN OC Signals
    OC_CAN_SIGNALS,

    // IPC OC Signals
    OC_IPC_SIGNALS,

    MAX_PRIVATE_SIG,
};</code>
   </attribute>
   <!--${CM::Signals::com_signals_ipc_cpu1_cm[COM_SIG_~}-->
   <attribute name="com_signals_ipc_cpu1_cm[COM_SIG_IPC_CPU1_CM_MAX]" type="const com_tag_t" visibility="0x00" properties="0x00">
    <code>={
    [COM_SIG_IPC_CPU1_CM_SEND_CAN_PUBLIC_MSG] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_can_send_msg[OC_CAN_CAN_PUBLIC_ID].super,
    },
    [COM_SIG_IPC_CPU1_CM_SEND_MCAN_MSG] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_can_send_msg[OC_CAN_MCAN_ID].super,
    },
    [COM_SIG_IPC_CPU1_CM_FSBB_STATUS_REPORT] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_update_fsbb_data,
    }
};</code>
   </attribute>
   <!--${CM::Signals::com_signals_ipc_cpu2_cm[COM_SIG_~}-->
   <attribute name="com_signals_ipc_cpu2_cm[COM_SIG_IPC_CPU2_CM_MAX]" type="const com_tag_t" visibility="0x00" properties="0x00">
    <code>={
    [COM_SIG_IPC_CPU2_CM_SEND_CAN_PUBLIC_MSG] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_can_send_msg[OC_CAN_CAN_PUBLIC_ID].super,
    },
    [COM_SIG_IPC_CPU2_CM_SEND_MCAN_MSG] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_can_send_msg[OC_CAN_MCAN_ID].super,
    }
};</code>
   </attribute>
   <!--${CM::Signals::com_signals_can_public[COM_SIG_C~}-->
   <attribute name="com_signals_can_public[COM_SIG_CAN_PUBLIC_MAX]" type="const com_tag_t" visibility="0x00" properties="0x00">
    <code>={
    [COM_SIG_CAN_PUBLIC_CONTROL_START] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_start_control.super.super,
    },
    [COM_SIG_CAN_PUBLIC_CONTROL_STOP] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_stop_control.super.super,
    },
    [COM_SIG_CAN_PUBLIC_EMERGENCY_SHUTDOWN] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_emergency_shutdown.super.super,
    },
    [COM_SIG_CAN_PUBLIC_PRECHARGE_START] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_precharge_start.super.super,
    },
    [COM_SIG_CAN_PUBLIC_RESET] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_reset.super.super,
    },
    [COM_SIG_CAN_PUBLIC_CLEAR_FAULT] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_clear_fault.super.super,
    },
    [COM_SIG_CAN_PUBLIC_CHANGE_SETPOINT] = {
        .p_ao = &amp;p_ao_communication,
        .im_evt = &amp;im_evt_change_setpoint.super.super,
    },
};</code>
   </attribute>
   <!--${CM::Signals::com_signals_mcan[COM_SIG_MCAN_MA~}-->
   <attribute name="com_signals_mcan[COM_SIG_MCAN_MAX]" type="const com_tag_t" visibility="0x00" properties="0x00">
    <code>={
};</code>
   </attribute>
  </package>
  <!--${CM::ao_priority}-->
  <attribute name="ao_priority" type="enum" visibility="0x04" properties="0x00">
   <code>{
    // Priority in ascendance order
    IDLE_TASK=0U,
    AO_COMMUNICATION_PRIO,
};</code>
  </attribute>
  <!--${CM::OC_enum}-->
  <package name="OC_enum" stereotype="0x00">
   <!--${CM::OC_enum::IPC}-->
   <package name="IPC" stereotype="0x00">
    <!--${CM::OC_enum::IPC::ipc_named}-->
    <attribute name="ipc_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_IPC_CM_CPU1_ID,
#ifdef DUALCORE
    OC_IPC_CM_CPU2_ID,
#endif
    OC_IPC_NUM_OF_INST,
};</code>
    </attribute>
   </package>
   <!--${CM::OC_enum::CAN}-->
   <package name="CAN" stereotype="0x00">
    <!--${CM::OC_enum::CAN::can_named}-->
    <attribute name="can_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_CAN_CAN_PUBLIC_ID,
    OC_CAN_MCAN_ID,
    OC_CAN_NUM_OF_INST,
};</code>
    </attribute>
   </package>
  </package>
  <!--${CM::Immutable_Events}-->
  <package name="Immutable_Events" stereotype="0x00">
   <!--${CM::Immutable_Events::General}-->
   <package name="General" stereotype="0x00">
    <!--${CM::Immutable_Events::General::im_evt_running_qf}-->
    <attribute name="im_evt_running_qf" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(RUNNING_QF_SIG);</code>
    </attribute>
    <!--${CM::Immutable_Events::General::im_evt_init_complete}-->
    <attribute name="im_evt_init_complete" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(INIT_COMPLETE_SIG);</code>
    </attribute>
   </package>
   <!--${CM::Immutable_Events::Communication}-->
   <package name="Communication" stereotype="0x00">
    <!--${CM::Immutable_Events::Communication::IPC}-->
    <package name="IPC" stereotype="0x00">
     <!--${CM::Immutable_Events::Communication::IPC::im_evt_ipc_reset_ch[OC_IPC_NUM_O~}-->
     <attribute name="im_evt_ipc_reset_ch[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
#ifdef DUALCORE
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    },
#endif
};</code>
     </attribute>
     <!--${CM::Immutable_Events::Communication::IPC::im_evt_ipc_reset_complete[OC_IPC~}-->
     <attribute name="im_evt_ipc_reset_complete[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
#ifdef DUALCORE
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    },
#endif
};</code>
     </attribute>
     <!--${CM::Immutable_Events::Communication::IPC::im_evt_ipc_receive_msg[OC_IPC_NU~}-->
     <attribute name="im_evt_ipc_receive_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
#ifdef DUALCORE
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    },
#endif
};</code>
     </attribute>
     <!--${CM::Immutable_Events::Communication::IPC::im_evt_ipc_full_bus[OC_IPC_NUM_O~}-->
     <attribute name="im_evt_ipc_full_bus[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
#ifdef DUALCORE
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    },
#endif
};</code>
     </attribute>
     <!--${CM::Immutable_Events::Communication::IPC::im_evt_ipc_remote_reset[OC_IPC_N~}-->
     <attribute name="im_evt_ipc_remote_reset[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
#ifdef DUALCORE
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    },
#endif
};</code>
     </attribute>
    </package>
    <!--${CM::Immutable_Events::Communication::CAN}-->
    <package name="CAN" stereotype="0x00">
     <!--${CM::Immutable_Events::Communication::CAN::im_evt_can_send_msg[OC_CAN_NUM_O~}-->
     <attribute name="im_evt_can_send_msg[OC_CAN_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
      <code>={
    [OC_CAN_CAN_PUBLIC_ID] = {
        .super = QEVT_INITIALIZER(CAN_SEND_MSG_SIG),
        .ID = OC_CAN_CAN_PUBLIC_ID,
    },
    [OC_CAN_MCAN_ID] = {
        .super = QEVT_INITIALIZER(CAN_SEND_MSG_SIG),
        .ID = OC_CAN_MCAN_ID,
    }
};</code>
     </attribute>
    </package>
   </package>
   <!--${CM::Immutable_Events::To CPU1}-->
   <package name="To CPU1" stereotype="0x00">
    <!--${CM::Immutable_Events::To CPU1::im_evt_start_control}-->
    <attribute name="im_evt_start_control" type="OC_Evt_Communication_Message_t const" visibility="0x00" properties="0x00">
     <code>= {
    .super = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    .msg = {
        .com_sig = COM_SIG_IPC_CM_CPU1_CONTROL_START,
        .message_size = 0,
        .payload = {0}
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::To CPU1::im_evt_stop_control}-->
    <attribute name="im_evt_stop_control" type="OC_Evt_Communication_Message_t const" visibility="0x00" properties="0x00">
     <code>= {
    .super = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    .msg = {
        .com_sig = COM_SIG_IPC_CM_CPU1_CONTROL_STOP,
        .message_size = 0,
        .payload = {0}
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::To CPU1::im_evt_emergency_shutdown}-->
    <attribute name="im_evt_emergency_shutdown" type="OC_Evt_Communication_Message_t const" visibility="0x00" properties="0x00">
     <code>= {
    .super = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    .msg = {
        .com_sig = COM_SIG_IPC_CM_CPU1_EMERGENCY_SHUTDOWN,
        .message_size = 0,
        .payload = {0}
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::To CPU1::im_evt_precharge_start}-->
    <attribute name="im_evt_precharge_start" type="OC_Evt_Communication_Message_t const" visibility="0x00" properties="0x00">
     <code>= {
    .super = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    .msg = {
        .com_sig = COM_SIG_IPC_CM_CPU1_PRECHARGE_START,
        .message_size = 0,
        .payload = {0}
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::To CPU1::im_evt_clear_fault}-->
    <attribute name="im_evt_clear_fault" type="OC_Evt_Communication_Message_t const" visibility="0x00" properties="0x00">
     <code>= {
    .super = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    .msg = {
        .com_sig = COM_SIG_IPC_CM_CPU1_CLEAR_FAULT,
        .message_size = 0,
        .payload = {0}
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::To CPU1::im_evt_reset}-->
    <attribute name="im_evt_reset" type="OC_Evt_Communication_Message_t const" visibility="0x00" properties="0x00">
     <code>= {
    .super = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    .msg = {
        .com_sig = COM_SIG_IPC_CM_CPU1_RESET,
        .message_size = 0,
        .payload = {0}
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::To CPU1::im_evt_change_setpoint}-->
    <attribute name="im_evt_change_setpoint" type="OC_Evt_Communication_Message_t const" visibility="0x00" properties="0x00">
     <code>= {
    .super = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    .msg = {
        .com_sig = COM_SIG_IPC_CM_CPU1_CHANGE_SETPOINT,
        .message_size = 0,
        .payload = {0}
    }
};</code>
    </attribute>
   </package>
   <!--${CM::Immutable_Events::From CPU1}-->
   <package name="From CPU1" stereotype="0x00">
    <!--${CM::Immutable_Events::From CPU1::im_evt_update_fsbb_data}-->
    <attribute name="im_evt_update_fsbb_data" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(UPDATE_FSBB_DATA_SIG);</code>
    </attribute>
   </package>
  </package>
 </package>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x00">
  <!--${Shared::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${Shared::Signals::com_tag_t}-->
   <class name="com_tag_t">
    <!--${Shared::Signals::com_tag_t::p_ao}-->
    <attribute name="p_ao" type="QActive * const * const" visibility="0x02" properties="0x00"/>
    <!--${Shared::Signals::com_tag_t::im_evt}-->
    <attribute name="im_evt" type="const QEvt * const" visibility="0x02" properties="0x00"/>
   </class>
   <!--${Shared::Signals::Communication_CAN}-->
   <package name="Communication_CAN" stereotype="0x00">
    <!--${Shared::Signals::Communication_CA~::com_signals_can_public}-->
    <attribute name="com_signals_can_public" type="enum" visibility="0x04" properties="0x00">
     <code>{
    COM_SIG_CAN_PUBLIC_CONTROL_START,
    COM_SIG_CAN_PUBLIC_CONTROL_STOP,
    COM_SIG_CAN_PUBLIC_EMERGENCY_SHUTDOWN,
    COM_SIG_CAN_PUBLIC_PRECHARGE_START,
    COM_SIG_CAN_PUBLIC_CHANGE_SETPOINT,
    COM_SIG_CAN_PUBLIC_RESET,
    COM_SIG_CAN_PUBLIC_CLEAR_FAULT,
    COM_SIG_CAN_PUBLIC_MAX,
    COM_SIG_CAN_PUBLIC_NOTHING = COM_SIG_CAN_PUBLIC_MAX,
};</code>
    </attribute>
    <!--${Shared::Signals::Communication_CA~::com_signals_mcan}-->
    <attribute name="com_signals_mcan" type="enum" visibility="0x04" properties="0x00">
     <code>{
    COM_SIG_MCAN_MAX,
    COM_SIG_MCAN_NOTHING = COM_SIG_MCAN_MAX,
};</code>
    </attribute>
    <!--${Shared::Signals::Communication_CA~::com_signals_can_skiip}-->
    <attribute name="com_signals_can_skiip" type="enum" visibility="0x04" properties="0x00">
     <code>{
    COM_SIG_CAN_SKIIP_1_HEART_BEAT,
    COM_SIG_CAN_SKIIP_2_HEART_BEAT,
    COM_SIG_CAN_SKIIP_UPDATE_MEASURE,
    COM_SIG_CAN_SKIIP_MAX,
    COM_SIG_CAN_SKIIP_NOTHING = COM_SIG_CAN_SKIIP_MAX,
};</code>
    </attribute>
   </package>
   <!--${Shared::Signals::Communication IPC}-->
   <package name="Communication IPC" stereotype="0x00">
    <!--${Shared::Signals::Communication IP~::com_signals_cpu1_cpu2_ipc}-->
    <attribute name="com_signals_cpu1_cpu2_ipc" type="enum" visibility="0x04" properties="0x00">
     <code>{
    //Index Signals Here
    COM_SIG_IPC_CPU1_CPU2_MAX,
    COM_SIG_IPC_CPU1_CPU2_NOTHING = COM_SIG_IPC_CPU1_CPU2_MAX,
};</code>
    </attribute>
    <!--${Shared::Signals::Communication IP~::com_signals_cpu2_cpu1_ipc}-->
    <attribute name="com_signals_cpu2_cpu1_ipc" type="enum" visibility="0x04" properties="0x00">
     <code>{
    //Index Signals Here
    COM_SIG_IPC_CPU2_CPU1_MAX,
    COM_SIG_IPC_CPU2_CPU1_NOTHING = COM_SIG_IPC_CPU2_CPU1_MAX,
};</code>
    </attribute>
    <!--${Shared::Signals::Communication IP~::com_signals_cpu1_cm_ipc}-->
    <attribute name="com_signals_cpu1_cm_ipc" type="enum" visibility="0x04" properties="0x00">
     <code>{
    //Index Signals Here
    COM_SIG_IPC_CPU1_CM_SEND_CAN_PUBLIC_MSG,
    COM_SIG_IPC_CPU1_CM_SEND_MCAN_MSG,
    COM_SIG_IPC_CPU1_CM_FSBB_STATUS_REPORT,
    COM_SIG_IPC_CPU1_CM_MAX,
    COM_SIG_IPC_CPU1_CM_NOTHING = COM_SIG_IPC_CPU1_CM_MAX,
};</code>
    </attribute>
    <!--${Shared::Signals::Communication IP~::com_signals_cm_cpu1_ipc}-->
    <attribute name="com_signals_cm_cpu1_ipc" type="enum" visibility="0x04" properties="0x00">
     <code>{
    //Index Signals Here
    COM_SIG_IPC_CM_CPU1_CONTROL_START,
    COM_SIG_IPC_CM_CPU1_CONTROL_STOP,
    COM_SIG_IPC_CM_CPU1_EMERGENCY_SHUTDOWN,
    COM_SIG_IPC_CM_CPU1_PRECHARGE_START,
    COM_SIG_IPC_CM_CPU1_CHANGE_SETPOINT,
    COM_SIG_IPC_CM_CPU1_CLEAR_FAULT,
    COM_SIG_IPC_CM_CPU1_RESET,
    COM_SIG_IPC_CM_CPU1_MAX,
    COM_SIG_IPC_CM_CPU1_NOTHING = COM_SIG_IPC_CM_CPU1_MAX,
};</code>
    </attribute>
    <!--${Shared::Signals::Communication IP~::com_signals_cpu2_cm_ipc}-->
    <attribute name="com_signals_cpu2_cm_ipc" type="enum" visibility="0x04" properties="0x00">
     <code>{
    //Index Signals Here
    COM_SIG_IPC_CPU2_CM_SEND_CAN_PUBLIC_MSG,
    COM_SIG_IPC_CPU2_CM_SEND_MCAN_MSG,
    COM_SIG_IPC_CPU2_CM_MAX,
    COM_SIG_IPC_CPU2_CM_NOTHING = COM_SIG_IPC_CPU2_CM_MAX,
};</code>
    </attribute>
    <!--${Shared::Signals::Communication IP~::com_signals_cm_cpu2_ipc}-->
    <attribute name="com_signals_cm_cpu2_ipc" type="enum" visibility="0x04" properties="0x00">
     <code>{
    //Index Signals Here
    COM_SIG_IPC_CM_CPU2_MAX,
    COM_SIG_IPC_CM_CPU2_NOTHING = COM_SIG_IPC_CM_CPU2_MAX,
};</code>
    </attribute>
   </package>
   <!--${Shared::Signals::setpoint_list}-->
   <attribute name="setpoint_list" type="enum" visibility="0x04" properties="0x00">
    <code>{
    IL_CURRENT_SETPOINT,
    IO_CURRENT_SETPOINT,
    POWER_SETPOINT,
    NUM_OF_SETPOINTS,
};</code>
   </attribute>
   <!--${Shared::Signals::fsbb_faults_list}-->
   <attribute name="fsbb_faults_list" type="enum" visibility="0x04" properties="0x00">
    <code>{
    FSBB_FAULT_SKIIP1_OVERVOLTAGE = 0,
    FSBB_FAULT_SKIIP1_OVERCURRENT,
    FSBB_FAULT_SKIIP1_OVERHEAT,
    FSBB_FAULT_SKIIP1_HALT,
    FSBB_FAULT_SKIIP2_OVERVOLTAGE,
    FSBB_FAULT_SKIIP2_OVERCURRENT,
    FSBB_FAULT_SKIIP2_OVERHEAT,
    FSBB_FAULT_SKIIP2_HALT,
    FSBB_FAULT_INDUCTOR_OVERHEAT,
    FSBB_FAULT_CAPACITOR_OVERHEAT,
    FSBB_FAULT_ERROR_OUT_1,
    FSBB_FAULT_ERROR_OUT_2,
    FSBB_FAULT_SETTLE_TIMEOUT,
    FSBB_FAULT_CLA_1_WATCHDOG_TIMEOUT,
    FSBB_FAULT_CLA_2_WATCHDOG_TIMEOUT,
    FSBB_FAULT_EMERGENCY_SHUTDOWN,
    FSBB_FAULT_SKIIP1_CARDIAC_ARREST,
    FSBB_FAULT_SKIIP2_CARDIAC_ARREST,

    FSBB_NUM_OF_FAULTS,
};</code>
   </attribute>
   <!--${Shared::Signals::fsbb_measures}-->
   <attribute name="fsbb_measures" type="enum" visibility="0x04" properties="0x00">
    <code>{
    FSBB_MEASURE_SKIIP1_PCB_TEMPERATURE,
    FSBB_MEASURE_SKIIP1_DCB_TEMPERATURE,
    FSBB_MEASURE_SKIIP2_PCB_TEMPERATURE,
    FSBB_MEASURE_SKIIP2_DCB_TEMPERATURE,
    NUM_OF_FSBB_MEASURES,
};</code>
   </attribute>
  </package>
  <!--${Shared::Types}-->
  <package name="Types" stereotype="0x00">
   <!--${Shared::Types::com_payload}-->
   <class name="com_payload">
    <!--${Shared::Types::com_payload::data[MAX_SIG_PAYLOAD]}-->
    <attribute name="data[MAX_SIG_PAYLOAD]" type="uint16_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Types::Communication_Message_t}-->
   <class name="Communication_Message_t">
    <!--${Shared::Types::Communication_Me~::com_sig}-->
    <attribute name="com_sig" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Communication_Me~::message_size}-->
    <attribute name="message_size" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Communication_Me~::payload}-->
    <attribute name="payload" type="com_payload" visibility="0x02" properties="0x00"/>
   </class>
   <!--${Shared::Types::Setpoint_Data_t}-->
   <class name="Setpoint_Data_t">
    <!--${Shared::Types::Setpoint_Data_t::setpoint_id}-->
    <attribute name="setpoint_id" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Setpoint_Data_t::setpoint_value}-->
    <attribute name="setpoint_value" type="uint16_t" visibility="0x02" properties="0x00"/>
   </class>
   <!--${Shared::Types::Skiip_CAN_Faults_t}-->
   <class name="Skiip_CAN_Faults_t">
    <!--${Shared::Types::Skiip_CAN_Faults~::dc_link_overvoltage : 1}-->
    <attribute name="dc_link_overvoltage : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::over_temperature_pcb : 1}-->
    <attribute name="over_temperature_pcb : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::over_temperature_dcb : 1}-->
    <attribute name="over_temperature_dcb : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::over_current  : 1}-->
    <attribute name="over_current  : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::bot_oscilation_error : 1}-->
    <attribute name="bot_oscilation_error : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::bot_overlap_error : 1}-->
    <attribute name="bot_overlap_error : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::bot_vce : 1}-->
    <attribute name="bot_vce : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::top_oscilation_error : 1}-->
    <attribute name="top_oscilation_error : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::top_overlap_error : 1}-->
    <attribute name="top_overlap_error : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::top_vce : 1}-->
    <attribute name="top_vce : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::internal_error : 1}-->
    <attribute name="internal_error : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::switch_signal_active : 1}-->
    <attribute name="switch_signal_active : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::halt_set : 1}-->
    <attribute name="halt_set : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::under_voltage_vp : 1}-->
    <attribute name="under_voltage_vp : 1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::Skiip_CAN_Faults~::reserved : 2}-->
    <attribute name="reserved : 2" type="uint16_t" visibility="0x02" properties="0x00"/>
   </class>
   <!--${Shared::Types::FSBB_Control_faults_t}-->
   <class name="FSBB_Control_faults_t">
    <!--${Shared::Types::FSBB_Control_fau~::skiip1_overvoltage:1}-->
    <attribute name="skiip1_overvoltage:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip1_overcurrent:1}-->
    <attribute name="skiip1_overcurrent:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip1_overheat:1}-->
    <attribute name="skiip1_overheat:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip1_halt:1}-->
    <attribute name="skiip1_halt:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip2_overvoltage:1}-->
    <attribute name="skiip2_overvoltage:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip2_overcurrent:1}-->
    <attribute name="skiip2_overcurrent:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip2_overheat:1}-->
    <attribute name="skiip2_overheat:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip2_halt:1}-->
    <attribute name="skiip2_halt:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::inductor_overheat:1}-->
    <attribute name="inductor_overheat:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::capacitor_overheat:1}-->
    <attribute name="capacitor_overheat:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::error_out_1:1}-->
    <attribute name="error_out_1:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::error_out_2:1}-->
    <attribute name="error_out_2:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::settle_timeout:1}-->
    <attribute name="settle_timeout:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::cla_t1_watchdog_timeout:1}-->
    <attribute name="cla_t1_watchdog_timeout:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::cla_t2_watchdog_timeout:1}-->
    <attribute name="cla_t2_watchdog_timeout:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::emergency_shutdown:1}-->
    <attribute name="emergency_shutdown:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip1_error:1}-->
    <attribute name="skiip1_error:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip2_error:1}-->
    <attribute name="skiip2_error:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip1_cardiac_arrest:1}-->
    <attribute name="skiip1_cardiac_arrest:1" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${Shared::Types::FSBB_Control_fau~::skiip2_cardiac_arrest:1}-->
    <attribute name="skiip2_cardiac_arrest:1" type="uint16_t" visibility="0x02" properties="0x00"/>
   </class>
   <!--${Shared::Types::FSBB_Control_Public_Data_t}-->
   <class name="FSBB_Control_Public_Data_t">
    <!--${Shared::Types::FSBB_Control_Pub~::faults}-->
    <attribute name="faults" type="FSBB_Control_faults_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Types::System_Public_Data_t}-->
   <class name="System_Public_Data_t">
    <!--${Shared::Types::System_Public_Da~::fsbb_data}-->
    <attribute name="fsbb_data" type="FSBB_Control_Public_Data_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Types::Aux Types}-->
   <package name="Aux Types" stereotype="0x00">
    <!--${Shared::Types::Aux Types::Communication_Message_FSBB_Contr~}-->
    <class name="Communication_Message_FSBB_Control_Public_Data_t">
     <!--${Shared::Types::Aux Types::Communication_Me~::com_sig}-->
     <attribute name="com_sig" type="uint16_t" visibility="0x00" properties="0x00"/>
     <!--${Shared::Types::Aux Types::Communication_Me~::message_size}-->
     <attribute name="message_size" type="uint16_t" visibility="0x00" properties="0x00"/>
     <!--${Shared::Types::Aux Types::Communication_Me~::payload}-->
     <attribute name="payload" type="FSBB_Control_Public_Data_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Types::Aux Types::FSBB_Measure_Update_t}-->
    <class name="FSBB_Measure_Update_t">
     <!--${Shared::Types::Aux Types::FSBB_Measure_Upd~::measure_id}-->
     <attribute name="measure_id" type="uint16_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::FSBB_Measure_Upd~::measure}-->
     <attribute name="measure" type="uint16_t" visibility="0x02" properties="0x00"/>
    </class>
    <!--${Shared::Types::Aux Types::CAN_Open_1_Byte_Data_Decode_t}-->
    <class name="CAN_Open_1_Byte_Data_Decode_t">
     <!--${Shared::Types::Aux Types::CAN_Open_1_Byte_~::header:8}-->
     <attribute name="header:8" type="uint64_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_1_Byte_~::object_id:16}-->
     <attribute name="object_id:16" type="uint64_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_1_Byte_~::subindex:8}-->
     <attribute name="subindex:8" type="uint16_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_1_Byte_~::data:8}-->
     <attribute name="data:8" type="uint64_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_1_Byte_~::reserved:24}-->
     <attribute name="reserved:24" type="uint64_t" visibility="0x02" properties="0x00"/>
    </class>
    <!--${Shared::Types::Aux Types::CAN_Open_2_Byte_Data_Decode_t}-->
    <class name="CAN_Open_2_Byte_Data_Decode_t">
     <!--${Shared::Types::Aux Types::CAN_Open_2_Byte_~::header:8}-->
     <attribute name="header:8" type="uint64_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_2_Byte_~::object_id:16}-->
     <attribute name="object_id:16" type="uint64_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_2_Byte_~::subindex:8}-->
     <attribute name="subindex:8" type="uint16_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_2_Byte_~::data:16}-->
     <attribute name="data:16" type="uint64_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_2_Byte_~::reserved:16}-->
     <attribute name="reserved:16" type="uint64_t" visibility="0x02" properties="0x00"/>
    </class>
    <!--${Shared::Types::Aux Types::CAN_Open_4_Byte_Data_Decode_t}-->
    <class name="CAN_Open_4_Byte_Data_Decode_t">
     <!--${Shared::Types::Aux Types::CAN_Open_4_Byte_~::header:8}-->
     <attribute name="header:8" type="uint64_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_4_Byte_~::object_id:16}-->
     <attribute name="object_id:16" type="uint64_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_4_Byte_~::subindex:8}-->
     <attribute name="subindex:8" type="uint16_t" visibility="0x02" properties="0x00"/>
     <!--${Shared::Types::Aux Types::CAN_Open_4_Byte_~::data:32}-->
     <attribute name="data:32" type="uint64_t" visibility="0x02" properties="0x00"/>
    </class>
   </package>
  </package>
  <!--${Shared::Event_Types}-->
  <package name="Event_Types" stereotype="0x00">
   <!--${Shared::Event_Types::OC}-->
   <package name="OC" stereotype="0x00">
    <!--${Shared::Event_Types::OC::OC_Evt}-->
    <class name="OC_Evt" superclass="qpc::QEvt">
     <!--${Shared::Event_Types::OC::OC_Evt::ID}-->
     <attribute name="ID" type="uint16_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::OC::OC_TimeEvt}-->
    <class name="OC_TimeEvt" superclass="qpc::QTimeEvt">
     <!--${Shared::Event_Types::OC::OC_TimeEvt::ID}-->
     <attribute name="ID" type="uint16_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::OC::OC_Evt_CAN_Message_Received_t}-->
    <class name="OC_Evt_CAN_Message_Received_t" superclass="Shared::Event_Types::OC::OC_Evt">
     <!--${Shared::Event_Types::OC::OC_Evt_CAN_Messa~::Message_ID}-->
     <attribute name="Message_ID" type="uint32_t" visibility="0x00" properties="0x00"/>
     <!--${Shared::Event_Types::OC::OC_Evt_CAN_Messa~::Data[4]}-->
     <attribute name="Data[4]" type="uint16_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::OC::OC_Evt_CAN_Send_Message_t}-->
    <class name="OC_Evt_CAN_Send_Message_t" superclass="Shared::Event_Types::OC::OC_Evt">
     <!--${Shared::Event_Types::OC::OC_Evt_CAN_Send_~::Message_Box_ID}-->
     <attribute name="Message_Box_ID" type="uint16_t" visibility="0x00" properties="0x00"/>
     <!--${Shared::Event_Types::OC::OC_Evt_CAN_Send_~::Data[4]}-->
     <attribute name="Data[4]" type="uint16_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::OC::OC_Evt_Communication_Message_t}-->
    <class name="OC_Evt_Communication_Message_t" superclass="Shared::Event_Types::OC::OC_Evt">
     <!--${Shared::Event_Types::OC::OC_Evt_Communica~::msg}-->
     <attribute name="msg" type="Communication_Message_t" visibility="0x00" properties="0x00"/>
    </class>
   </package>
   <!--${Shared::Event_Types::AO}-->
   <package name="AO" stereotype="0x00">
    <!--${Shared::Event_Types::AO::AO_Evt_Change_Setpoint_t}-->
    <class name="AO_Evt_Change_Setpoint_t" superclass="qpc::QEvt">
     <!--${Shared::Event_Types::AO::AO_Evt_Change_Se~::data}-->
     <attribute name="data" type="Setpoint_Data_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::AO::AO_Evt_Set_Fault_t}-->
    <class name="AO_Evt_Set_Fault_t" superclass="qpc::QEvt">
     <!--${Shared::Event_Types::AO::AO_Evt_Set_Fault~::fault_id}-->
     <attribute name="fault_id" type="uint16_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::AO::AO_Evt_Set_Multiple_Faults_t}-->
    <class name="AO_Evt_Set_Multiple_Faults_t" superclass="qpc::QEvt">
     <!--${Shared::Event_Types::AO::AO_Evt_Set_Multi~::faults}-->
     <attribute name="faults" type="FSBB_Control_faults_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::AO::AO_Evt_Update_FSBB_Data_t}-->
    <class name="AO_Evt_Update_FSBB_Data_t" superclass="qpc::QEvt">
     <!--${Shared::Event_Types::AO::AO_Evt_Update_FS~::data}-->
     <attribute name="data" type="FSBB_Control_Public_Data_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::AO::AO_Evt_Update_Measure_t}-->
    <class name="AO_Evt_Update_Measure_t" superclass="qpc::QEvt">
     <!--${Shared::Event_Types::AO::AO_Evt_Update_Me~::measure}-->
     <attribute name="measure" type="uint16_t" visibility="0x00" properties="0x00"/>
    </class>
   </package>
   <!--${Shared::Event_Types::Mutable_Event_Support}-->
   <package name="Mutable_Event_Support" stereotype="0x00">
    <!--${Shared::Event_Types::Mutable_Event_Su~::OC_Evt_Aux_Communication_Message~}-->
    <class name="OC_Evt_Aux_Communication_Message_FSBB_Control_Public_Data_t" superclass="Shared::Event_Types::OC::OC_Evt">
     <!--${Shared::Event_Types::Mutable_Event_Su~::OC_Evt_Aux_Commu~::msg}-->
     <attribute name="msg" type="Communication_Message_FSBB_Control_Public_Data_t" visibility="0x00" properties="0x00"/>
    </class>
    <!--${Shared::Event_Types::Mutable_Event_Su~::AO_Evt_FSBB_Measure_Update_t}-->
    <class name="AO_Evt_FSBB_Measure_Update_t" superclass="qpc::QEvt">
     <!--${Shared::Event_Types::Mutable_Event_Su~::AO_Evt_FSBB_Meas~::data}-->
     <attribute name="data" type="FSBB_Measure_Update_t" visibility="0x02" properties="0x00"/>
    </class>
   </package>
  </package>
  <!--${Shared::Macros}-->
  <package name="Macros" stereotype="0x00">
   <!--${Shared::Macros::OC_IPC_CMD_REMOTE_RESET}-->
   <attribute name="OC_IPC_CMD_REMOTE_RESET" type="" visibility="0x03" properties="0x00">
    <code>0
</code>
   </attribute>
   <!--${Shared::Macros::OC_IPC_CMD_RESET_COMPLETE}-->
   <attribute name="OC_IPC_CMD_RESET_COMPLETE" type="" visibility="0x03" properties="0x00">
    <code>1</code>
   </attribute>
   <!--${Shared::Macros::MAX_SIG_PAYLOAD}-->
   <attribute name="MAX_SIG_PAYLOAD" type="" visibility="0x03" properties="0x00">
    <documentation>size of payload of the mensage in  uint16_t
in payload the message</documentation>
    <code>16</code>
   </attribute>
   <!--${Shared::Macros::OC_CAN_MSG_BUFFER_SIZE}-->
   <attribute name="OC_CAN_MSG_BUFFER_SIZE" type="" visibility="0x03" properties="0x00">
    <code>512</code>
   </attribute>
   <!--${Shared::Macros::CRITICAL_LIMITS}-->
   <package name="CRITICAL_LIMITS" stereotype="0x00">
    <!--${Shared::Macros::CRITICAL_LIMITS::CRITICAL_LIMIT_SKIIP_CURRENT}-->
    <attribute name="CRITICAL_LIMIT_SKIIP_CURRENT" type="" visibility="0x03" properties="0x00">
     <code>1500</code>
    </attribute>
    <!--${Shared::Macros::CRITICAL_LIMITS::CRITICAL_LIMIT_SKIIP_VOLTAGE}-->
    <attribute name="CRITICAL_LIMIT_SKIIP_VOLTAGE" type="" visibility="0x03" properties="0x00">
     <code>1000</code>
    </attribute>
    <!--${Shared::Macros::CRITICAL_LIMITS::CRITICAL_LIMIT_SKIIP_TEMPERATURE}-->
    <attribute name="CRITICAL_LIMIT_SKIIP_TEMPERATURE" type="" visibility="0x03" properties="0x00">
     <code>90</code>
    </attribute>
    <!--${Shared::Macros::CRITICAL_LIMITS::CRITICAL_LIMIT_CAPACITOR_TEMPERA~}-->
    <attribute name="CRITICAL_LIMIT_CAPACITOR_TEMPERATURE" type="" visibility="0x03" properties="0x00">
     <code>200</code>
    </attribute>
    <!--${Shared::Macros::CRITICAL_LIMITS::CRITICAL_LIMIT_INDUCTOR_TEMPERAT~}-->
    <attribute name="CRITICAL_LIMIT_INDUCTOR_TEMPERATURE" type="" visibility="0x03" properties="0x00">
     <code>200</code>
    </attribute>
   </package>
   <!--${Shared::Macros::TIME_MACROS}-->
   <package name="TIME_MACROS" stereotype="0x00">
    <!--${Shared::Macros::TIME_MACROS::RTOS_TICK_FREQUENCY_HZ}-->
    <attribute name="RTOS_TICK_FREQUENCY_HZ" type="" visibility="0x03" properties="0x00">
     <code>(1000.0f)</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::RTOS_TICK_PERIOD_MS}-->
    <attribute name="RTOS_TICK_PERIOD_MS" type="" visibility="0x03" properties="0x00">
     <code>(1000.f/RTOS_TICK_FREQUENCY_HZ)</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::CHECK_PARAMS_PRECHARGE_TIME_MS}-->
    <attribute name="CHECK_PARAMS_PRECHARGE_TIME_MS" type="" visibility="0x03" properties="0x00">
     <code>100</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::CHECK_CLA_WATCHDOG_TIME_MS}-->
    <attribute name="CHECK_CLA_WATCHDOG_TIME_MS" type="" visibility="0x03" properties="0x00">
     <code>1000</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::CHECK_PARAMS_IL_TIME_MS}-->
    <attribute name="CHECK_PARAMS_IL_TIME_MS" type="" visibility="0x03" properties="0x00">
     <code>10</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::MAX_SETTLE_TIME_MS}-->
    <attribute name="MAX_SETTLE_TIME_MS" type="" visibility="0x03" properties="0x00">
     <code>100</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::REPORT_STATUS_PERIOD_TIME_MS}-->
    <attribute name="REPORT_STATUS_PERIOD_TIME_MS" type="" visibility="0x03" properties="0x00">
     <code>1000</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::ANALOG_FAULT_MIN_TIME_MS}-->
    <attribute name="ANALOG_FAULT_MIN_TIME_MS" type="" visibility="0x03" properties="0x00">
     <code>1000</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::CAN_PERIODIC_MSG_TIME_MS}-->
    <attribute name="CAN_PERIODIC_MSG_TIME_MS" type="" visibility="0x03" properties="0x00">
     <code>1000</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::MEASURE_PERIOD_TIME_MS}-->
    <attribute name="MEASURE_PERIOD_TIME_MS" type="" visibility="0x03" properties="0x00">
     <code>1000</code>
    </attribute>
    <!--${Shared::Macros::TIME_MACROS::SKIIP_HEARTBEAT_TIMEOUT_MS}-->
    <attribute name="SKIIP_HEARTBEAT_TIMEOUT_MS" type="" visibility="0x03" properties="0x00">
     <code>2000</code>
    </attribute>
   </package>
   <!--${Shared::Macros::CONDITIONAL_LIMITS}-->
   <package name="CONDITIONAL_LIMITS" stereotype="0x00">
    <!--${Shared::Macros::CONDITIONAL_LIMI~::IL_MIN_OPEN}-->
    <attribute name="IL_MIN_OPEN" type="" visibility="0x03" properties="0x00">
     <code>20</code>
    </attribute>
    <!--${Shared::Macros::CONDITIONAL_LIMI~::IL_MIN_STOP}-->
    <attribute name="IL_MIN_STOP" type="" visibility="0x03" properties="0x00">
     <code>100</code>
    </attribute>
    <!--${Shared::Macros::CONDITIONAL_LIMI~::MIN_DELTA_V_PRECHARGE_FINISH}-->
    <attribute name="MIN_DELTA_V_PRECHARGE_FINISH" type="" visibility="0x03" properties="0x00">
     <code>20</code>
    </attribute>
   </package>
   <!--${Shared::Macros::CONTROL_MACROS}-->
   <package name="CONTROL_MACROS" stereotype="0x00">
    <!--${Shared::Macros::CONTROL_MACROS::CONTROL_FREQUENCY_HZ}-->
    <attribute name="CONTROL_FREQUENCY_HZ" type="" visibility="0x03" properties="0x00">
     <code>2000.0f</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::CONTROL_PERIOD_SEC}-->
    <attribute name="CONTROL_PERIOD_SEC" type="" visibility="0x03" properties="0x00">
     <code>(1.0f/CONTROL_FREQUENCY_HZ)</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::VIN_MIN}-->
    <attribute name="VIN_MIN" type="" visibility="0x03" properties="0x00">
     <code>5</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::MIN_OFF_DUTY_CICLE_VIN}-->
    <attribute name="MIN_OFF_DUTY_CICLE_VIN" type="" visibility="0x03" properties="0x00">
     <code>0</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::MIN_OFF_DUTY_CICLE_VOUT}-->
    <attribute name="MIN_OFF_DUTY_CICLE_VOUT" type="" visibility="0x03" properties="0x00">
     <code>0</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::MIN_DUTY_CICLE_VIN_SWITCH}-->
    <attribute name="MIN_DUTY_CICLE_VIN_SWITCH" type="" visibility="0x03" properties="0x00">
     <code>0</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::MAX_DUTY_CICLE_VIN_SWITCH}-->
    <attribute name="MAX_DUTY_CICLE_VIN_SWITCH" type="" visibility="0x03" properties="0x00">
     <code>1</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::MIN_DUTY_CICLE_VOUT_SWITCH}-->
    <attribute name="MIN_DUTY_CICLE_VOUT_SWITCH" type="" visibility="0x03" properties="0x00">
     <code>0</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::MAX_DUTY_CICLE_VOUT_SWITCH}-->
    <attribute name="MAX_DUTY_CICLE_VOUT_SWITCH" type="" visibility="0x03" properties="0x00">
     <code>1</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::EPWM_DEAD_TIME_COUNT}-->
    <attribute name="EPWM_DEAD_TIME_COUNT" type="" visibility="0x03" properties="0x00">
     <code>600</code>
    </attribute>
    <!--${Shared::Macros::CONTROL_MACROS::EPWM_PRD}-->
    <attribute name="EPWM_PRD" type="" visibility="0x03" properties="0x00">
     <code>50000</code>
    </attribute>
   </package>
  </package>
  <!--${Shared::Event Pools}-->
  <package name="Event Pools" stereotype="0x00">
   <!--${Shared::Event Pools::EVT_POOL_1_SIZE}-->
   <attribute name="EVT_POOL_1_SIZE" type="" visibility="0x03" properties="0x00">
    <code>8
</code>
   </attribute>
   <!--${Shared::Event Pools::EVT_POOL_2_SIZE}-->
   <attribute name="EVT_POOL_2_SIZE" type="" visibility="0x03" properties="0x00">
    <code>8
</code>
   </attribute>
   <!--${Shared::Event Pools::EVT_POOL_3_SIZE}-->
   <attribute name="EVT_POOL_3_SIZE" type="" visibility="0x03" properties="0x00">
    <code>8
</code>
   </attribute>
   <!--${Shared::Event Pools::EVT_POOL_4_SIZE}-->
   <attribute name="EVT_POOL_4_SIZE" type="" visibility="0x03" properties="0x00">
    <code>8
</code>
   </attribute>
   <!--${Shared::Event Pools::evt_pool_payload_1_t}-->
   <class name="evt_pool_payload_1_t">
    <!--${Shared::Event Pools::evt_pool_payload~::data[1]}-->
    <attribute name="data[1]" type="uint16_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Event Pools::evt_pool_payload_2_t}-->
   <class name="evt_pool_payload_2_t">
    <!--${Shared::Event Pools::evt_pool_payload~::data[4]}-->
    <attribute name="data[4]" type="uint16_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Event Pools::evt_pool_payload_3_t}-->
   <class name="evt_pool_payload_3_t">
    <!--${Shared::Event Pools::evt_pool_payload~::data[8]}-->
    <attribute name="data[8]" type="uint16_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Event Pools::evt_pool_payload_4_t}-->
   <class name="evt_pool_payload_4_t">
    <!--${Shared::Event Pools::evt_pool_payload~::data[16]}-->
    <attribute name="data[16]" type="uint16_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Event Pools::EvtPool1_t}-->
   <class name="EvtPool1_t" superclass="qpc::QEvt">
    <!--${Shared::Event Pools::EvtPool1_t::payload}-->
    <attribute name="payload" type="evt_pool_payload_1_t" visibility="0x02" properties="0x00"/>
   </class>
   <!--${Shared::Event Pools::EvtPool2_t}-->
   <class name="EvtPool2_t" superclass="qpc::QEvt">
    <!--${Shared::Event Pools::EvtPool2_t::payload}-->
    <attribute name="payload" type="evt_pool_payload_2_t" visibility="0x02" properties="0x00"/>
   </class>
   <!--${Shared::Event Pools::EvtPool3_t}-->
   <class name="EvtPool3_t" superclass="qpc::QEvt">
    <!--${Shared::Event Pools::EvtPool3_t::payload}-->
    <attribute name="payload" type="evt_pool_payload_3_t" visibility="0x02" properties="0x00"/>
   </class>
   <!--${Shared::Event Pools::EvtPool4_t}-->
   <class name="EvtPool4_t" superclass="qpc::QEvt">
    <!--${Shared::Event Pools::EvtPool4_t::payload}-->
    <attribute name="payload" type="evt_pool_payload_4_t" visibility="0x02" properties="0x00"/>
   </class>
  </package>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::Cores_Project}-->
  <directory name="Cores_Project">
   <!--${.::Cores_Project::CPU1}-->
   <directory name="CPU1">
    <!--${.::Cores_Project::CPU1::qm_files}-->
    <directory name="qm_files">
     <!--${.::Cores_Project::CPU1::qm_files::AOs}-->
     <directory name="AOs">
      <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_communication}-->
      <directory name="ao_communication">
       <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_communication::communication.h}-->
       <file name="communication.h">
        <text>#ifndef AO_COMMUNICATION_H_
#define AO_COMMUNICATION_H_

#include &quot;main_qm.h&quot;

// Orthogonal Component
#include &quot;OCs/oc_ipc/oc_ipc.h&quot;
#include &quot;OCs/oc_can/oc_can.h&quot;

$declare${CPU1::AOs::AO_Communication}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_communication::communication.c}-->
       <file name="communication.c">
        <text>#include &quot;./communication.h&quot;

Q_DEFINE_THIS_FILE

$define${CPU1::AOs::AO_Communication}

</text>
       </file>
      </directory>
      <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control}-->
      <directory name="ao_fsbb_control">
       <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control::fsbb_control.h}-->
       <file name="fsbb_control.h">
        <text>#ifndef AO_FSBB_CONTROL_H_
#define AO_FSBB_CONTROL_H_

#include &quot;main_qm.h&quot;

$declare${CPU1::AOs::AO_FSBB_Control}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control::fsbb_control.c}-->
       <file name="fsbb_control.c">
        <text>#include &quot;./fsbb_control.h&quot;

$define${CPU1::AOs::AO_FSBB_Control}</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CPU1::qm_files::OCs}-->
     <directory name="OCs">
      <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_ipc}-->
      <directory name="oc_ipc">
       <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_ipc::oc_ipc.h}-->
       <file name="oc_ipc.h">
        <text>#ifndef OC_IPC_H_
#define OC_IPC_H_

#include &quot;main_qm.h&quot;

#include &quot;ipc_config.h&quot;

$declare${OCs::OC_IPC}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_ipc::oc_ipc.c}-->
       <file name="oc_ipc.c">
        <text>#include &quot;./oc_ipc.h&quot;

$define${OCs::OC_IPC}</text>
       </file>
      </directory>
      <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_can}-->
      <directory name="oc_can">
       <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_can::oc_can.h}-->
       <file name="oc_can.h">
        <text>#ifndef OC_CAN_H_
#define OC_CAN_H_

#include &quot;main_qm.h&quot;

$declare${OCs::OC_CAN}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_can::oc_can.c}-->
       <file name="oc_can.c">
        <text>#include &quot;./oc_can.h&quot;

$define${OCs::OC_CAN}</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CPU1::qm_files::main_qm.h}-->
     <file name="main_qm.h">
      <text>#ifndef MAIN_QM_H_
#define MAIN_QM_H_

#include &quot;qpc.h&quot;
#include &quot;macros_qm.h&quot;
#include &quot;bsp_basic.h&quot;
#include &quot;cla1_config.h&quot;
#include &quot;system_assert.h&quot;

//================================================
//====================Signals=====================
//================================================

$declare${Shared}

$declare${OCs::Signals}

$declare${CPU1::Signals}

//================================================
//===================Priorities===================
//================================================

$declare${CPU1::ao_priority}

//================================================
//=================Active-Objects=================
//================================================

// AO_FSBB_Control
$declare${CPU1::AOs::AO_FSBB_Control::globals}

// AO_Communication
$declare${CPU1::AOs::AO_Communication::globals}

//================================================
//=============Orthogonal-Components==============
//================================================

$declare${CPU1::OC_enum}

//================================================
//================Immutable-Events================
//================================================

$declare${CPU1::Immutable_Events}

#endif // MAIN_QM_H_</text>
     </file>
     <!--${.::Cores_Project::CPU1::qm_files::main_qm.c}-->
     <file name="main_qm.c">
      <text>#include &quot;main_qm.h&quot;

$define${Shared}

$define${CPU1::Immutable_Events}

$define${CPU1::Signals}</text>
     </file>
     <!--${.::Cores_Project::CPU1::qm_files::macros_qm.h}-->
     <file name="macros_qm.h">
      <text>$declare${Shared::Macros}</text>
     </file>
    </directory>
   </directory>
   <!--${.::Cores_Project::CPU2}-->
   <directory name="CPU2">
    <!--${.::Cores_Project::CPU2::qm_files}-->
    <directory name="qm_files">
     <!--${.::Cores_Project::CPU2::qm_files::AOs}-->
     <directory name="AOs">
      <!--${.::Cores_Project::CPU2::qm_files::AOs::ao_communication}-->
      <directory name="ao_communication">
       <!--${.::Cores_Project::CPU2::qm_files::AOs::ao_communication::communication.h}-->
       <file name="communication.h">
        <text>#ifndef AO_COMMUNICATION_H_
#define AO_COMMUNICATION_H_

#include &quot;main_qm.h&quot;

// Orthogonal Component
#include &quot;OCs/oc_ipc/oc_ipc.h&quot;

$declare${CPU2::AOs::AO_Communication}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU2::qm_files::AOs::ao_communication::communication.c}-->
       <file name="communication.c">
        <text>#include &quot;./communication.h&quot;

Q_DEFINE_THIS_FILE

$define${CPU2::AOs::AO_Communication}

</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CPU2::qm_files::OCs}-->
     <directory name="OCs">
      <!--${.::Cores_Project::CPU2::qm_files::OCs::oc_ipc}-->
      <directory name="oc_ipc">
       <!--${.::Cores_Project::CPU2::qm_files::OCs::oc_ipc::oc_ipc.h}-->
       <file name="oc_ipc.h">
        <text>#ifndef OC_IPC_H_
#define OC_IPC_H_

#include &quot;main_qm.h&quot;

#include &quot;ipc_config.h&quot;

$declare${OCs::OC_IPC}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU2::qm_files::OCs::oc_ipc::oc_ipc.c}-->
       <file name="oc_ipc.c">
        <text>#include &quot;./oc_ipc.h&quot;

$define${OCs::OC_IPC}</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CPU2::qm_files::main_qm.h}-->
     <file name="main_qm.h">
      <text>#ifndef MAIN_QM_H_
#define MAIN_QM_H_

#include &quot;qpc.h&quot;
#include &quot;macros_qm.h&quot;
#include &quot;bsp_basic.h&quot;
#include &quot;system_assert.h&quot;

//================================================
//====================Signals=====================
//================================================

$declare${Shared}

$declare${OCs::Signals}

$declare${CPU2::Signals}

//================================================
//===================Priorities===================
//================================================

$declare${CPU2::ao_priority}

//================================================
//=================Active-Objects=================
//================================================

// AO_Communication
$declare${CPU2::AOs::AO_Communication::globals}

//================================================
//=============Orthogonal-Components==============
//================================================

$declare${CPU2::OC_enum}

//================================================
//================Immutable-Events================
//================================================

$declare${CPU2::Immutable_Events}

#endif // MAIN_QM_H_</text>
     </file>
     <!--${.::Cores_Project::CPU2::qm_files::main_qm.c}-->
     <file name="main_qm.c">
      <text>#include &quot;main_qm.h&quot;

$define${Shared}

$define${CPU2::Immutable_Events}

$define${CPU2::Signals}</text>
     </file>
     <!--${.::Cores_Project::CPU2::qm_files::macros_qm.h}-->
     <file name="macros_qm.h">
      <text>$declare${Shared::Macros}</text>
     </file>
    </directory>
   </directory>
   <!--${.::Cores_Project::CM}-->
   <directory name="CM">
    <!--${.::Cores_Project::CM::qm_files}-->
    <directory name="qm_files">
     <!--${.::Cores_Project::CM::qm_files::AOs}-->
     <directory name="AOs">
      <!--${.::Cores_Project::CM::qm_files::AOs::ao_communication}-->
      <directory name="ao_communication">
       <!--${.::Cores_Project::CM::qm_files::AOs::ao_communication::communication.h}-->
       <file name="communication.h">
        <text>#ifndef AO_COMMUNICATION_H_
#define AO_COMMUNICATION_H_

#include &quot;main_qm.h&quot;

// Orthogonal Component
#include &quot;OCs/oc_ipc/oc_ipc.h&quot;
#include &quot;OCs/oc_can/oc_can.h&quot;

$declare${CM::AOs::AO_Communication}

#endif</text>
       </file>
       <!--${.::Cores_Project::CM::qm_files::AOs::ao_communication::communication.c}-->
       <file name="communication.c">
        <text>#include &quot;./communication.h&quot;

Q_DEFINE_THIS_FILE

$define${CM::AOs::AO_Communication}

</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CM::qm_files::OCs}-->
     <directory name="OCs">
      <!--${.::Cores_Project::CM::qm_files::OCs::oc_ipc}-->
      <directory name="oc_ipc">
       <!--${.::Cores_Project::CM::qm_files::OCs::oc_ipc::oc_ipc.h}-->
       <file name="oc_ipc.h">
        <text>#ifndef OC_IPC_H_
#define OC_IPC_H_

#include &quot;main_qm.h&quot;

#include &quot;ipc_config.h&quot;

$declare${OCs::OC_IPC}

#endif</text>
       </file>
       <!--${.::Cores_Project::CM::qm_files::OCs::oc_ipc::oc_ipc.c}-->
       <file name="oc_ipc.c">
        <text>#include &quot;./oc_ipc.h&quot;

$define${OCs::OC_IPC}</text>
       </file>
      </directory>
      <!--${.::Cores_Project::CM::qm_files::OCs::oc_can}-->
      <directory name="oc_can">
       <!--${.::Cores_Project::CM::qm_files::OCs::oc_can::oc_can.h}-->
       <file name="oc_can.h">
        <text>#ifndef OC_CAN_H_
#define OC_CAN_H_

#include &quot;main_qm.h&quot;

$declare${OCs::OC_CAN}

#endif</text>
       </file>
       <!--${.::Cores_Project::CM::qm_files::OCs::oc_can::oc_can.c}-->
       <file name="oc_can.c">
        <text>#include &quot;./oc_can.h&quot;

$define${OCs::OC_CAN}</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CM::qm_files::main_qm.h}-->
     <file name="main_qm.h">
      <text>#ifndef MAIN_QM_H_
#define MAIN_QM_H_

#include &quot;qpc.h&quot;
#include &quot;macros_qm.h&quot;
#include &quot;bsp_basic.h&quot;
#include &quot;system_assert.h&quot;

//================================================
//====================Signals=====================
//================================================

$declare${Shared}

$declare${OCs::Signals}

$declare${CM::Signals}

//================================================
//===================Priorities===================
//================================================

$declare${CM::ao_priority}

//================================================
//=================Active-Objects=================
//================================================

// AO_Communication
$declare${CM::AOs::AO_Communication::globals}

//================================================
//=============Orthogonal-Components==============
//================================================

$declare${CM::OC_enum}

//================================================
//================Immutable-Events================
//================================================

$declare${CM::Immutable_Events}

#endif // MAIN_QM_H_</text>
     </file>
     <!--${.::Cores_Project::CM::qm_files::main_qm.c}-->
     <file name="main_qm.c">
      <text>#include &quot;main_qm.h&quot;

$define${Shared}

$define${CM::Immutable_Events}

$define${CM::Signals}</text>
     </file>
     <!--${.::Cores_Project::CM::qm_files::macros_qm.h}-->
     <file name="macros_qm.h">
      <text>$declare${Shared::Macros}</text>
     </file>
    </directory>
   </directory>
  </directory>
 </directory>
</model>
