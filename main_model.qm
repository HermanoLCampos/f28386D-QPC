<?xml version="1.0" encoding="UTF-8"?>
<model version="6.1.1" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm.xsd">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your computer and the GNU-GCC compiler. Both of them will be available if you install the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${OCs}-->
 <package name="OCs" stereotype="0x00">
  <!--${OCs::OC_IPC}-->
  <package name="OC_IPC" stereotype="0x00">
   <!--${OCs::OC_IPC::OC_IPC}-->
   <class name="OC_IPC" superclass="qpc::QHsm">
    <!--${OCs::OC_IPC::OC_IPC::owner}-->
    <attribute name="owner" type="QActive *" visibility="0x02" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::id}-->
    <attribute name="id" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::msg_buffer[OC_IPC_NUM_OF_INST]}-->
    <attribute name="msg_buffer[OC_IPC_NUM_OF_INST]" type="oc_ipc_msg_t" visibility="0x00" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::n_msg_received}-->
    <attribute name="n_msg_received" type="uint16_t" visibility="0x00" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::fault_cont}-->
    <attribute name="fault_cont" type="uint16_t" visibility="0x00" properties="0x00"/>
    <!--${OCs::OC_IPC::OC_IPC::ctor}-->
    <operation name="ctor" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_IPC::OC_IPC::ctor::owner}-->
     <parameter name="owner" type="QActive * const"/>
     <!--${OCs::OC_IPC::OC_IPC::ctor::id}-->
     <parameter name="id" type="uint16_t"/>
     <code>QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;OC_IPC_initial));
me-&gt;owner = owner;
me-&gt;id = id;</code>
    </operation>
    <!--${OCs::OC_IPC::OC_IPC::SM}-->
    <statechart properties="0x00">
     <!--${OCs::OC_IPC::OC_IPC::SM::initial}-->
     <initial target="../1">
      <initial_glyph conn="4,8,5,3,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${OCs::OC_IPC::OC_IPC::SM::Waiting_QF}-->
     <state name="Waiting_QF">
      <!--${OCs::OC_IPC::OC_IPC::SM::Waiting_QF::RUNNING_QF}-->
      <tran trig="RUNNING_QF" target="../../2">
       <tran_glyph conn="8,10,3,0,10,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,4,20,12"/>
     </state>
     <!--${OCs::OC_IPC::OC_IPC::SM::Start}-->
     <state name="Start">
      <entry>me-&gt;n_msg_received = 0;
me-&gt;fault_cont = 0;</entry>
      <!--${OCs::OC_IPC::OC_IPC::SM::Start::INIT_COMPLETE}-->
      <tran trig="INIT_COMPLETE" target="../../3/5">
       <tran_glyph conn="8,30,3,3,24,-10,24">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,24,20,12">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <!--${OCs::OC_IPC::OC_IPC::SM::Operation}-->
     <state name="Operation">
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_RECEIVE_MSG}-->
      <tran trig="IPC_RECEIVE_MSG">
       <action>FUNCTIONAL_ASSERT(0,me-&gt;n_msg_received == 0);
for( ; me-&gt;n_msg_received&lt;BSP_IPC_BUFFER_SIZE ; me-&gt;n_msg_received++){
    if(! oc_ipc_receive_message((uint16_t *) &amp;me-&gt;msg_buffer[ me-&gt;n_msg_received] , me-&gt;id))
        break;
}</action>
       <tran_glyph conn="36,12,3,-1,16">
        <action box="0,-2,15,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_SEND_MSG}-->
      <tran trig="IPC_SEND_MSG">
       <action>if(
    !oc_ipc_send_message(
        (uint16_t *) &amp;(Q_EVT_CAST(OC_Evt_IPC_Message_t)-&gt;msg),
        me-&gt;id
    )
){
    QACTIVE_POST(
        me-&gt;owner,
        &amp;im_evt_ipc_full_bus[me-&gt;id].super,
        (void *)0
    );
}</action>
       <tran_glyph conn="36,14,3,-1,16">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_FULL_BUS}-->
      <tran trig="IPC_FULL_BUS" target="../6">
       <tran_glyph conn="36,44,3,3,20">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_RESET_CH}-->
      <tran trig="IPC_RESET_CH" target="../7">
       <tran_glyph conn="36,32,3,3,20">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::IPC_REMOTE_RESET}-->
      <tran trig="IPC_REMOTE_RESET" target="../5">
       <action>oc_ipc_reset_complete(me-&gt;id);</action>
       <tran_glyph conn="36,22,3,3,20">
        <action box="0,-2,17,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::Running}-->
      <state name="Running">
       <entry>BSP_BKPT;</entry>
       <state_glyph node="56,16,18,8">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::Error}-->
      <state name="Error">
       <entry>me-&gt;fault_cont++;
QACTIVE_POST(
    me-&gt;owner,
    &amp;im_evt_ipc_reset_ch[me-&gt;id].super,
    (void *)0
);</entry>
       <!--${OCs::OC_IPC::OC_IPC::SM::Operation::Error::IPC_RECEIVE_MSG, IPC_SEND_MSG}-->
       <tran trig="IPC_RECEIVE_MSG, IPC_SEND_MSG">
        <tran_glyph conn="56,46,3,-1,16">
         <action box="0,-2,14,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="56,40,18,8">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${OCs::OC_IPC::OC_IPC::SM::Operation::In_Reset}-->
      <state name="In_Reset">
       <entry>oc_ipc_reset_ch(me-&gt;id);</entry>
       <!--${OCs::OC_IPC::OC_IPC::SM::Operation::In_Reset::IPC_RESET_COMPLETE}-->
       <tran trig="IPC_RESET_COMPLETE" target="../../5">
        <tran_glyph conn="56,32,3,1,22,-10,-4">
         <action box="0,-2,18,2"/>
        </tran_glyph>
       </tran>
       <!--${OCs::OC_IPC::OC_IPC::SM::Operation::In_Reset::IPC_RECEIVE_MSG, IPC_SEND_MSG}-->
       <tran trig="IPC_RECEIVE_MSG, IPC_SEND_MSG">
        <tran_glyph conn="56,34,3,-1,16">
         <action box="0,-2,16,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="56,28,18,8">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="36,4,54,46"/>
     </state>
     <state_diagram size="100,80"/>
    </statechart>
   </class>
  </package>
  <!--${OCs::OC_CAN}-->
  <package name="OC_CAN" stereotype="0x00">
   <!--${OCs::OC_CAN::OC_CAN}-->
   <class name="OC_CAN" superclass="qpc::QHsm">
    <!--${OCs::OC_CAN::OC_CAN::owner}-->
    <attribute name="owner" type="QActive *" visibility="0x02" properties="0x00"/>
    <!--${OCs::OC_CAN::OC_CAN::id}-->
    <attribute name="id" type="uint16_t" visibility="0x02" properties="0x00"/>
    <!--${OCs::OC_CAN::OC_CAN::ctor}-->
    <operation name="ctor" type="void" visibility="0x00" properties="0x00">
     <!--${OCs::OC_CAN::OC_CAN::ctor::owner}-->
     <parameter name="owner" type="QActive * const"/>
     <!--${OCs::OC_CAN::OC_CAN::ctor::id}-->
     <parameter name="id" type="uint16_t"/>
     <code>QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;OC_CAN_initial));
me-&gt;owner = owner;
me-&gt;id = id;</code>
    </operation>
    <!--${OCs::OC_CAN::OC_CAN::SM}-->
    <statechart properties="0x00">
     <!--${OCs::OC_CAN::OC_CAN::SM::initial}-->
     <initial target="../1">
      <initial_glyph conn="4,8,5,3,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${OCs::OC_CAN::OC_CAN::SM::Waiting_QF}-->
     <state name="Waiting_QF">
      <!--${OCs::OC_CAN::OC_CAN::SM::Waiting_QF::RUNNING_QF}-->
      <tran trig="RUNNING_QF" target="../../2">
       <tran_glyph conn="8,10,3,0,10,16">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,4,20,12"/>
     </state>
     <!--${OCs::OC_CAN::OC_CAN::SM::Start}-->
     <state name="Start">
      <!--${OCs::OC_CAN::OC_CAN::SM::Start::INIT_COMPLETE}-->
      <tran trig="INIT_COMPLETE" target="../../3">
       <tran_glyph conn="8,32,3,3,28">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,26,20,12"/>
     </state>
     <!--${OCs::OC_CAN::OC_CAN::SM::Operation}-->
     <state name="Operation">
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::initial}-->
      <initial target="../6">
       <initial_glyph conn="54,20,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::CAN_RECEIVE_MSG}-->
      <tran trig="CAN_RECEIVE_MSG">
       <tran_glyph conn="36,10,3,-1,16">
        <action box="0,-2,16,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::CAN_SEND_MSG}-->
      <tran trig="CAN_SEND_MSG">
       <tran_glyph conn="36,12,3,-1,16">
        <action box="0,-2,15,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::CAN_PASSIVE_ERROR}-->
      <tran trig="CAN_PASSIVE_ERROR" target="../5">
       <tran_glyph conn="36,36,3,3,22">
        <action box="0,-2,18,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::CAN_BUS_OFF}-->
      <tran trig="CAN_BUS_OFF" target="../7">
       <tran_glyph conn="36,52,3,3,22">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Error_Passive}-->
      <state name="Error_Passive">
       <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Error_Passive::CAN_ERROR_CLEAR}-->
       <tran trig="CAN_ERROR_CLEAR" target="../..">
        <tran_glyph conn="58,38,3,1,26">
         <action box="0,-2,17,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="58,32,20,12"/>
      </state>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Error_Active}-->
      <state name="Error_Active">
       <state_glyph node="58,16,20,12"/>
      </state>
      <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Bus_Off}-->
      <state name="Bus_Off">
       <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Bus_Off::CAN_RECEIVE_MSG}-->
       <tran trig="CAN_RECEIVE_MSG" target="../..">
        <tran_glyph conn="58,54,3,1,26">
         <action box="0,-2,16,2"/>
        </tran_glyph>
       </tran>
       <!--${OCs::OC_CAN::OC_CAN::SM::Operation::Bus_Off::CAN_SEND_MSG}-->
       <tran trig="CAN_SEND_MSG">
        <tran_glyph conn="58,56,3,-1,16">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="58,48,20,12"/>
      </state>
      <state_glyph node="36,4,48,60"/>
     </state>
     <state_diagram size="104,71"/>
    </statechart>
   </class>
  </package>
  <!--${OCs::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${OCs::Signals::OC_IPC_SIGNALS}-->
   <attribute name="OC_IPC_SIGNALS" type="" visibility="0x03" properties="0x00">
    <code>\
    IPC_RECEIVE_MSG_SIG,\
    IPC_SEND_MSG_SIG,\
    IPC_FULL_BUS_SIG,\
    IPC_RESET_CH_SIG,\
    IPC_REMOTE_RESET_SIG,\
    IPC_RESET_COMPLETE_SIG</code>
   </attribute>
   <!--${OCs::Signals::OC_CAN_SIGNALS}-->
   <attribute name="OC_CAN_SIGNALS" type="" visibility="0x03" properties="0x00">
    <code>\
    CAN_RECEIVE_MSG_SIG,\
    CAN_SEND_MSG_SIG,\
    CAN_PASSIVE_ERROR_SIG,\
    CAN_BUS_OFF_SIG,\
    CAN_ERROR_CLEAR_SIG</code>
   </attribute>
  </package>
 </package>
 <!--${CPU1}-->
 <package name="CPU1" stereotype="0x00">
  <!--${CPU1::AOs}-->
  <package name="AOs" stereotype="0x02">
   <!--${CPU1::AOs::AO_FSBB_Control}-->
   <package name="AO_FSBB_Control" stereotype="0x00">
    <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control}-->
    <class name="FSBB_Control" superclass="qpc::QActive">
     <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM}-->
     <statechart properties="0x00">
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::initial}-->
      <initial target="../1">
       <initial_glyph conn="4,8,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Waiting_QF}-->
      <state name="Waiting_QF">
       <entry>QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_running_qf,(void *)0);</entry>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Waiting_QF::RUNNING_QF}-->
       <tran trig="RUNNING_QF" target="../../2">
        <tran_glyph conn="8,10,3,0,10,14">
         <action box="0,-2,11,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,4,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Start}-->
      <state name="Start">
       <entry>BSP_BKPT;</entry>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Start::INIT_COMPLETE}-->
       <tran trig="INIT_COMPLETE" target="../../3/2">
        <tran_glyph conn="8,30,3,3,24,-16,18">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,24,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation}-->
      <state name="Operation">
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::RESET}-->
       <tran trig="RESET" target="../2">
        <tran_glyph conn="36,18,3,3,14">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::SET_FAULT}-->
       <tran trig="SET_FAULT" target="../6">
        <tran_glyph conn="36,34,3,3,14">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Uncharged}-->
       <state name="Uncharged">
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Uncharged::PRECHARGE_START}-->
        <tran trig="PRECHARGE_START" target="../../3">
         <tran_glyph conn="50,16,3,3,28">
          <action box="0,-2,18,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="50,10,20,12"/>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::PRECHARGE}-->
       <state name="PRECHARGE">
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::PRECHARGE::PRECHARGE_FINISH}-->
        <tran trig="PRECHARGE_FINISH" target="../../4">
         <tran_glyph conn="78,14,3,1,22,20,-2">
          <action box="0,-2,17,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="78,10,20,12"/>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Idle}-->
       <state name="Idle">
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Idle::START_CONTROL}-->
        <tran trig="START_CONTROL" target="../../5">
         <tran_glyph conn="78,36,3,3,28">
          <action box="0,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="78,30,20,12"/>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Running}-->
       <state name="Running">
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Running::STOP_CONTROL}-->
        <tran trig="STOP_CONTROL" target="../../7">
         <tran_glyph conn="106,34,3,1,26,24,-20">
          <action box="0,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="106,30,20,12"/>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Fault}-->
       <state name="Fault">
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::Fault::CLEAR_FAULT}-->
        <tran trig="CLEAR_FAULT" target="../../2">
         <tran_glyph conn="50,35,3,2,18,-13">
          <action box="0,-2,11,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="50,30,20,12"/>
       </state>
       <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle}-->
       <state name="To_Idle">
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle::IL_0}-->
        <tran trig="IL_0" target="../../4">
         <tran_glyph conn="112,56,1,2,-30,-14">
          <action box="-19,-2,14,2"/>
         </tran_glyph>
        </tran>
        <!--${CPU1::AOs::AO_FSBB_Control::FSBB_Control::SM::Operation::To_Idle::START_CONTROL}-->
        <tran trig="START_CONTROL" target="../../5">
         <tran_glyph conn="92,54,3,1,38,-18,-4">
          <action box="0,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="92,50,20,12"/>
       </state>
       <state_glyph node="36,4,102,62"/>
      </state>
      <state_diagram size="156,124"/>
     </statechart>
    </class>
    <!--${CPU1::AOs::AO_FSBB_Control::inst_ao_fsbb_control}-->
    <attribute name="inst_ao_fsbb_control" type="FSBB_Control" visibility="0x01" properties="0x00"/>
    <!--${CPU1::AOs::AO_FSBB_Control::globals}-->
    <package name="globals" stereotype="0x00">
     <!--${CPU1::AOs::AO_FSBB_Control::globals::p_ao_fsbb_control}-->
     <attribute name="p_ao_fsbb_control" type="QActive * const" visibility="0x00" properties="0x00">
      <code>= &amp;inst_ao_fsbb_control.super;</code>
     </attribute>
     <!--${CPU1::AOs::AO_FSBB_Control::globals::ao_fsbb_control_ctor}-->
     <operation name="ao_fsbb_control_ctor" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_FSBB_Control::globals::ao_fsbb_control_~::pAO}-->
      <parameter name="pAO" type="const QActive  * const"/>
      <code>FSBB_Control * const me = (FSBB_Control *) pAO;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;FSBB_Control_initial));</code>
     </operation>
    </package>
   </package>
   <!--${CPU1::AOs::AO_Communication}-->
   <package name="AO_Communication" stereotype="0x00">
    <!--${CPU1::AOs::AO_Communication::Communication}-->
    <class name="Communication" superclass="qpc::QActive">
     <!--${CPU1::AOs::AO_Communication::Communication::ipc_inst[OC_IPC_NUM_OF_INST]}-->
     <attribute name="ipc_inst[OC_IPC_NUM_OF_INST]" type="OC_IPC" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_Communication::Communication::can_inst[OC_CAN_NUM_OF_INST]}-->
     <attribute name="can_inst[OC_CAN_NUM_OF_INST]" type="OC_CAN" visibility="0x02" properties="0x00"/>
     <!--${CPU1::AOs::AO_Communication::Communication::SM}-->
     <statechart properties="0x00">
      <!--${CPU1::AOs::AO_Communication::Communication::SM::initial}-->
      <initial target="../1">
       <initial_glyph conn="4,8,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${CPU1::AOs::AO_Communication::Communication::SM::Waiting_QF}-->
      <state name="Waiting_QF">
       <entry>QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CPU2_ID].super) , (void *)0, (void *)0 );
QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CM_ID  ].super) , (void *)0, (void *)0 );

QASM_INIT( &amp;(me-&gt;can_inst[OC_CAN_CANB_ID].super)   , (void *)0, (void *)0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_running_qf,(void *)0);</entry>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Waiting_QF::RUNNING_QF}-->
       <tran trig="RUNNING_QF" target="../../2">
        <tran_glyph conn="8,10,3,0,10,16">
         <action box="0,-2,12,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,4,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU1::AOs::AO_Communication::Communication::SM::Start}-->
      <state name="Start">
       <entry>QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CPU2_ID].super) ,&amp;im_evt_running_qf, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CM_ID]  .super) ,&amp;im_evt_running_qf, (void *) 0 );

QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_CANB_ID].super),&amp;im_evt_running_qf, (void *) 0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_init_complete,(void *)0);</entry>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Start::INIT_COMPLETE}-->
       <tran trig="INIT_COMPLETE" target="../../3">
        <action>QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CPU2_ID].super) ,&amp;im_evt_init_complete, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU1_CM_ID]  .super) ,&amp;im_evt_init_complete, (void *) 0 );

QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_CANB_ID].super),&amp;im_evt_init_complete, (void *) 0 );</action>
        <tran_glyph conn="8,32,3,3,28">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,26,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation}-->
      <state name="Operation">
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation::IPC_RECEIVE_MSG}-->
       <tran trig="IPC_RECEIVE_MSG">
        <action>uint16_t ID = Q_EVT_CAST(OC_Evt)-&gt;ID;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[ID].super) ,e, (void *) 0 );

for(; me-&gt;ipc_inst[ID].n_msg_received &gt; 0 ; me-&gt;ipc_inst[ID].n_msg_received--){
    oc_ipc_msg_t* msg_to_process = &amp; me-&gt;ipc_inst[ID].msg_buffer[me-&gt;ipc_inst[ID].n_msg_received-1];

    if(msg_to_process-&gt;com_ipc_sig&lt;COM_SIG_IPC_MAX){

        switch(msg_to_process-&gt;com_ipc_sig){
        case COM_SIG_IPC_CAN_SEND_MSG:{
            //uint16_t can_id = msg_to_process-&gt;payload[0];
            //QASM_DISPATCH( &amp; me-&gt;can_inst[can_id].super , event, (void *) 0);
            break;
        }
        default:{
            // Mutable Events or Imutable Events
            break;
        }
        }


    //
    }else{
        // Invalid Command
    }
}</action>
        <tran_glyph conn="36,10,3,-1,16">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU1::AOs::AO_Communication::Communication::SM::Operation::IPC_FULL_BUS, IPC_RESET_CH, IPC_~}-->
       <tran trig="IPC_FULL_BUS, IPC_RESET_CH, IPC_REMOTE_RESET, IPC_RESET_COMPLETE, IPC_SEND_MSG">
        <action>uint16_t ID = Q_EVT_CAST(OC_Evt)-&gt;ID;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[ID].super) ,e, (void *) 0 );</action>
        <tran_glyph conn="36,12,3,-1,16">
         <action box="0,-2,18,9"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,4,38,46"/>
      </state>
      <state_diagram size="82,68"/>
     </statechart>
    </class>
    <!--${CPU1::AOs::AO_Communication::inst_ao_communication}-->
    <attribute name="inst_ao_communication" type="Communication" visibility="0x01" properties="0x00"/>
    <!--${CPU1::AOs::AO_Communication::globals}-->
    <package name="globals" stereotype="0x00">
     <!--${CPU1::AOs::AO_Communication::globals::p_ao_communication}-->
     <attribute name="p_ao_communication" type="QActive * const" visibility="0x00" properties="0x00">
      <code>= &amp;inst_ao_communication.super;</code>
     </attribute>
     <!--${CPU1::AOs::AO_Communication::globals::ao_communication_ctor}-->
     <operation name="ao_communication_ctor" type="void" visibility="0x00" properties="0x00">
      <!--${CPU1::AOs::AO_Communication::globals::ao_communication~::pAO}-->
      <parameter name="pAO" type="const QActive  * const"/>
      <code>Communication * const me = (Communication *) pAO;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Communication_initial));

// Orthogonal Components

OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CPU1_CPU2_ID] ,&amp;me-&gt;super, OC_IPC_CPU1_CPU2_ID);
OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CPU1_CM_ID  ] ,&amp;me-&gt;super, OC_IPC_CPU1_CM_ID  );

OC_CAN_ctor(&amp;me-&gt;can_inst[OC_CAN_CANB_ID] ,&amp;me-&gt;super, OC_CAN_CANB_ID);</code>
     </operation>
    </package>
   </package>
  </package>
  <!--${CPU1::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${CPU1::Signals::private_signals}-->
   <attribute name="private_signals" type="enum" visibility="0x04" properties="0x00">
    <code>{
// Publish Subscribe Signals
    TIMEOUT_SIG = Q_USER_SIG,

    // - Only PRIVATE

    MAX_PUB_SIG,

    // COMMON Signals
    RUNNING_QF_SIG,
    INIT_COMPLETE_SIG,

    //FSBB Signals
    PRECHARGE_START_SIG,
    PRECHARGE_FINISH_SIG,
    START_CONTROL_SIG,
    STOP_CONTROL_SIG,
    IL_0_SIG,
    RESET_SIG,
    SET_FAULT_SIG,
    CLEAR_FAULT_SIG,

    // CAN OC Signals
    OC_CAN_SIGNALS,

    // IPC OC Signals
    OC_IPC_SIGNALS,


    MAX_PRIVATE_SIG,
};</code>
   </attribute>
   <!--${CPU1::Signals::struct}-->
   <attribute name="struct" type="typedef" visibility="0x04" properties="0x00">
    <code>{
    uint16_t const sig_id;
    QActive * const p_ao;
}com_ipc_tag_t;</code>
   </attribute>
   <!--${CPU1::Signals::com_signals_ipc_table[COM_SIG_IP~}-->
   <attribute name="com_signals_ipc_table[COM_SIG_IPC_MAX]" type="QActive * const" visibility="0x00" properties="0x00">
    <code>={
    [COM_SIG_IPC_CAN_SEND_MSG] ={
        .sig_id = CAN_SEND_MSG_SIG,
        .p_ao = p_ao_communication,
    };
}</code>
   </attribute>
  </package>
  <!--${CPU1::ao_priority}-->
  <attribute name="ao_priority" type="enum" visibility="0x04" properties="0x00">
   <code>{
    // Priority in ascendance order
    IDLE_TASK=0U,
    AO_COMMUNICATION_PRIO,
    AO_FSBB_CONTROL_PRIO,
};</code>
  </attribute>
  <!--${CPU1::OC_enum}-->
  <package name="OC_enum" stereotype="0x00">
   <!--${CPU1::OC_enum::IPC}-->
   <package name="IPC" stereotype="0x00">
    <!--${CPU1::OC_enum::IPC::ipc_named}-->
    <attribute name="ipc_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_IPC_CPU1_CPU2_ID,
    OC_IPC_CPU1_CM_ID,
    OC_IPC_NUM_OF_INST,
};</code>
    </attribute>
   </package>
   <!--${CPU1::OC_enum::CAN}-->
   <package name="CAN" stereotype="0x00">
    <!--${CPU1::OC_enum::CAN::can_named}-->
    <attribute name="can_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_CAN_CANB_ID,
    OC_CAN_NUM_OF_INST,
};</code>
    </attribute>
   </package>
  </package>
  <!--${CPU1::Immutable_Events}-->
  <package name="Immutable_Events" stereotype="0x00">
   <!--${CPU1::Immutable_Events::General}-->
   <package name="General" stereotype="0x00">
    <!--${CPU1::Immutable_Events::General::im_evt_running_qf}-->
    <attribute name="im_evt_running_qf" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(RUNNING_QF_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::General::im_evt_init_complete}-->
    <attribute name="im_evt_init_complete" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(INIT_COMPLETE_SIG);</code>
    </attribute>
   </package>
   <!--${CPU1::Immutable_Events::FSBB}-->
   <package name="FSBB" stereotype="0x00">
    <!--${CPU1::Immutable_Events::FSBB::im_evt_precharge_start}-->
    <attribute name="im_evt_precharge_start" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(PRECHARGE_START_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_precharge_finish}-->
    <attribute name="im_evt_precharge_finish" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(PRECHARGE_FINISH_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_start_control}-->
    <attribute name="im_evt_start_control" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(START_CONTROL_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_stop_control}-->
    <attribute name="im_evt_stop_control" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(STOP_CONTROL_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_il_0}-->
    <attribute name="im_evt_il_0" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(IL_0_SIG);</code>
    </attribute>
    <!--${CPU1::Immutable_Events::FSBB::im_evt_reset}-->
    <attribute name="im_evt_reset" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(RESET_SIG);</code>
    </attribute>
   </package>
   <!--${CPU1::Immutable_Events::Communication}-->
   <package name="Communication" stereotype="0x00">
    <!--${CPU1::Immutable_Events::Communication::im_evt_ipc_receive_msg[OC_IPC_NU~}-->
    <attribute name="im_evt_ipc_receive_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU1::Immutable_Events::Communication::im_evt_ipc_send_msg[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_send_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU1::Immutable_Events::Communication::im_evt_ipc_full_bus[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_full_bus[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU1::Immutable_Events::Communication::im_evt_ipc_reset_ch[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_reset_ch[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU1::Immutable_Events::Communication::im_evt_ipc_reset_complete[OC_IPC~}-->
    <attribute name="im_evt_ipc_reset_complete[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU1::Immutable_Events::Communication::im_evt_ipc_remote_reset[OC_IPC_N~}-->
    <attribute name="im_evt_ipc_remote_reset[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU1_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CPU1_CPU2_ID,
    },
    [OC_IPC_CPU1_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CPU1_CM_ID,
    }
};</code>
    </attribute>
   </package>
  </package>
 </package>
 <!--${CPU2}-->
 <package name="CPU2" stereotype="0x00">
  <!--${CPU2::AOs}-->
  <package name="AOs" stereotype="0x02">
   <!--${CPU2::AOs::AO_Communication}-->
   <package name="AO_Communication" stereotype="0x00">
    <!--${CPU2::AOs::AO_Communication::Communication}-->
    <class name="Communication" superclass="qpc::QActive">
     <!--${CPU2::AOs::AO_Communication::Communication::ipc_inst[OC_IPC_NUM_OF_INST]}-->
     <attribute name="ipc_inst[OC_IPC_NUM_OF_INST]" type="OC_IPC" visibility="0x02" properties="0x00"/>
     <!--${CPU2::AOs::AO_Communication::Communication::SM}-->
     <statechart properties="0x00">
      <!--${CPU2::AOs::AO_Communication::Communication::SM::initial}-->
      <initial target="../1">
       <initial_glyph conn="4,8,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${CPU2::AOs::AO_Communication::Communication::SM::Waiting_QF}-->
      <state name="Waiting_QF">
       <entry>//BSP_BKPT;

QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CPU1_ID].super) , (void *)0, (void *)0 );
QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CM_ID  ].super) , (void *)0, (void *)0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_running_qf,(void *)0);</entry>
       <!--${CPU2::AOs::AO_Communication::Communication::SM::Waiting_QF::RUNNING_QF}-->
       <tran trig="RUNNING_QF" target="../../2">
        <tran_glyph conn="8,10,3,0,10,16">
         <action box="0,-2,12,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,4,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU2::AOs::AO_Communication::Communication::SM::Start}-->
      <state name="Start">
       <entry>BSP_BKPT;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CPU1_ID].super) , &amp;im_evt_running_qf, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CM_ID  ].super) , &amp;im_evt_running_qf, (void *) 0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_init_complete,(void *)0);</entry>
       <!--${CPU2::AOs::AO_Communication::Communication::SM::Start::INIT_COMPLETE}-->
       <tran trig="INIT_COMPLETE" target="../../3">
        <action>QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CPU1_ID].super) , &amp;im_evt_init_complete, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CPU2_CM_ID  ].super) , &amp;im_evt_init_complete, (void *) 0 );</action>
        <tran_glyph conn="8,32,3,3,28">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,26,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CPU2::AOs::AO_Communication::Communication::SM::Operation}-->
      <state name="Operation">
       <!--${CPU2::AOs::AO_Communication::Communication::SM::Operation::IPC_RECEIVE_MSG}-->
       <tran trig="IPC_RECEIVE_MSG">
        <action>uint16_t ID = Q_EVT_CAST(OC_Evt)-&gt;ID;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[ID].super) ,e, (void *) 0 );

for(; me-&gt;ipc_inst[ID].n_msg_received &gt; 0 ; me-&gt;ipc_inst[ID].n_msg_received--){
    oc_ipc_msg_t* msg_to_process = &amp; me-&gt;ipc_inst[ID].msg_buffer[me-&gt;ipc_inst[ID].n_msg_received-1];

    if(msg_to_process-&gt;com_ipc_sig&lt;COM_SIG_IPC_MAX){

        switch(msg_to_process-&gt;com_ipc_sig){
        case COM_SIG_IPC_CAN_SEND_MSG:{
            //uint16_t can_id = msg_to_process-&gt;payload[0];
            //QASM_DISPATCH( &amp; me-&gt;can_inst[can_id].super , event, (void *) 0);
            break;
        }
        default:{
            // Mutable Events or Imutable Events
            break;
        }
        }


    //
    }else{
        // Invalid Command
    }
}</action>
        <tran_glyph conn="36,10,3,-1,16">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${CPU2::AOs::AO_Communication::Communication::SM::Operation::IPC_FULL_BUS, IPC_RESET_CH, IPC_~}-->
       <tran trig="IPC_FULL_BUS, IPC_RESET_CH, IPC_REMOTE_RESET, IPC_RESET_COMPLETE, IPC_SEND_MSG">
        <action>uint16_t ID = Q_EVT_CAST(OC_Evt)-&gt;ID;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[ID].super) ,e, (void *) 0 );</action>
        <tran_glyph conn="36,12,3,-1,16">
         <action box="0,-2,19,9"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,4,38,46"/>
      </state>
      <state_diagram size="80,59"/>
     </statechart>
    </class>
    <!--${CPU2::AOs::AO_Communication::inst_ao_communication}-->
    <attribute name="inst_ao_communication" type="Communication" visibility="0x01" properties="0x00"/>
    <!--${CPU2::AOs::AO_Communication::globals}-->
    <package name="globals" stereotype="0x00">
     <!--${CPU2::AOs::AO_Communication::globals::p_ao_communication}-->
     <attribute name="p_ao_communication" type="QActive * const" visibility="0x00" properties="0x00">
      <code>= &amp;inst_ao_communication.super;</code>
     </attribute>
     <!--${CPU2::AOs::AO_Communication::globals::ao_communication_ctor}-->
     <operation name="ao_communication_ctor" type="void" visibility="0x00" properties="0x00">
      <!--${CPU2::AOs::AO_Communication::globals::ao_communication~::pAO}-->
      <parameter name="pAO" type="const QActive  * const"/>
      <code>Communication * const me = (Communication *) pAO;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Communication_initial));

// Orthogonal Components

OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CPU2_CPU1_ID] , &amp;me-&gt;super, OC_IPC_CPU2_CPU1_ID);
OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CPU2_CM_ID  ] , &amp;me-&gt;super, OC_IPC_CPU2_CM_ID  );</code>
     </operation>
    </package>
   </package>
  </package>
  <!--${CPU2::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${CPU2::Signals::private_signals}-->
   <attribute name="private_signals" type="enum" visibility="0x04" properties="0x00">
    <code>{
// Publish Subscribe Signals
    TIMEOUT_SIG = Q_USER_SIG,

    // - Only PRIVATE

    MAX_PUB_SIG,

    // COMMON Signals
    RUNNING_QF_SIG,
    INIT_COMPLETE_SIG,

    // IPC OC Signals
    OC_IPC_SIGNALS,

    MAX_PRIVATE_SIG,
};</code>
   </attribute>
   <!--${CPU2::Signals::struct}-->
   <attribute name="struct" type="typedef" visibility="0x04" properties="0x00">
    <code>{
    uint16_t const sig_id;
    QActive * const p_ao;
}com_ipc_tag_t;</code>
   </attribute>
   <!--${CPU2::Signals::com_signals_ipc_table[COM_SIG_IP~}-->
   <attribute name="com_signals_ipc_table[COM_SIG_IPC_MAX]" type="QActive * const" visibility="0x00" properties="0x00">
    <code>={
    [COM_SIG_IPC_CAN_SEND_MSG] ={
        .sig_id = CAN_SEND_MSG_SIG,
        .p_ao = p_ao_communication,
    };
}</code>
   </attribute>
  </package>
  <!--${CPU2::ao_priority}-->
  <attribute name="ao_priority" type="enum" visibility="0x04" properties="0x00">
   <code>{
    // Priority in ascendance order
    IDLE_TASK=0U,
    AO_COMMUNICATION_PRIO,
};</code>
  </attribute>
  <!--${CPU2::OC_enum}-->
  <package name="OC_enum" stereotype="0x00">
   <!--${CPU2::OC_enum::IPC}-->
   <package name="IPC" stereotype="0x00">
    <!--${CPU2::OC_enum::IPC::ipc_named}-->
    <attribute name="ipc_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_IPC_CPU2_CPU1_ID,
    OC_IPC_CPU2_CM_ID,
    OC_IPC_NUM_OF_INST,
};</code>
    </attribute>
   </package>
  </package>
  <!--${CPU2::AO_enum}-->
  <package name="AO_enum" stereotype="0x00"/>
  <!--${CPU2::Immutable_Events}-->
  <package name="Immutable_Events" stereotype="0x00">
   <!--${CPU2::Immutable_Events::General}-->
   <package name="General" stereotype="0x00">
    <!--${CPU2::Immutable_Events::General::im_evt_running_qf}-->
    <attribute name="im_evt_running_qf" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(RUNNING_QF_SIG);</code>
    </attribute>
    <!--${CPU2::Immutable_Events::General::im_evt_init_complete}-->
    <attribute name="im_evt_init_complete" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(INIT_COMPLETE_SIG);</code>
    </attribute>
   </package>
   <!--${CPU2::Immutable_Events::Communication}-->
   <package name="Communication" stereotype="0x00">
    <!--${CPU2::Immutable_Events::Communication::im_evt_ipc_receive_msg[OC_IPC_NU~}-->
    <attribute name="im_evt_ipc_receive_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU2::Immutable_Events::Communication::im_evt_ipc_send_msg[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_send_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU2::Immutable_Events::Communication::im_evt_ipc_full_bus[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_full_bus[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU2::Immutable_Events::Communication::im_evt_ipc_reset_ch[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_reset_ch[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU2::Immutable_Events::Communication::im_evt_ipc_reset_complete[OC_IPC~}-->
    <attribute name="im_evt_ipc_reset_complete[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
    </attribute>
    <!--${CPU2::Immutable_Events::Communication::im_evt_ipc_remote_reset[OC_IPC_N~}-->
    <attribute name="im_evt_ipc_remote_reset[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CPU2_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CPU2_CPU1_ID,
    },
    [OC_IPC_CPU2_CM_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CPU2_CM_ID,
    }
};</code>
    </attribute>
   </package>
  </package>
 </package>
 <!--${CM}-->
 <package name="CM" stereotype="0x00">
  <!--${CM::AOs}-->
  <package name="AOs" stereotype="0x02">
   <!--${CM::AOs::AO_Communication}-->
   <package name="AO_Communication" stereotype="0x00">
    <!--${CM::AOs::AO_Communication::Communication}-->
    <class name="Communication" superclass="qpc::QActive">
     <!--${CM::AOs::AO_Communication::Communication::ipc_inst[OC_IPC_NUM_OF_INST]}-->
     <attribute name="ipc_inst[OC_IPC_NUM_OF_INST]" type="OC_IPC" visibility="0x02" properties="0x00"/>
     <!--${CM::AOs::AO_Communication::Communication::can_inst[OC_CAN_NUM_OF_INST]}-->
     <attribute name="can_inst[OC_CAN_NUM_OF_INST]" type="OC_CAN" visibility="0x02" properties="0x00"/>
     <!--${CM::AOs::AO_Communication::Communication::SM}-->
     <statechart properties="0x00">
      <!--${CM::AOs::AO_Communication::Communication::SM::initial}-->
      <initial target="../1">
       <initial_glyph conn="4,8,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${CM::AOs::AO_Communication::Communication::SM::Waiting_QF}-->
      <state name="Waiting_QF">
       <entry>//BSP_BKPT;

QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU1_ID].super) , (void *)0, (void *)0 );
QASM_INIT( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU2_ID].super) , (void *)0, (void *)0 );

QASM_INIT( &amp;(me-&gt;can_inst[OC_CAN_CANA_ID].super) , (void *)0, (void *)0 );
QASM_INIT( &amp;(me-&gt;can_inst[OC_CAN_MCAN_ID].super) , (void *)0, (void *)0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_running_qf,(void *)0);</entry>
       <!--${CM::AOs::AO_Communication::Communication::SM::Waiting_QF::RUNNING_QF}-->
       <tran trig="RUNNING_QF" target="../../2">
        <tran_glyph conn="8,10,3,0,10,16">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,4,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CM::AOs::AO_Communication::Communication::SM::Start}-->
      <state name="Start">
       <entry>QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU1_ID].super) , &amp;im_evt_running_qf, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU2_ID].super) , &amp;im_evt_running_qf, (void *) 0 );

QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_CANA_ID].super) , &amp;im_evt_running_qf, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_MCAN_ID].super) , &amp;im_evt_running_qf, (void *) 0 );

QACTIVE_POST(&amp;me-&gt;super,&amp;im_evt_init_complete,(void *)0);</entry>
       <!--${CM::AOs::AO_Communication::Communication::SM::Start::INIT_COMPLETE}-->
       <tran trig="INIT_COMPLETE" target="../../3">
        <action>QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU1_ID].super) , &amp;im_evt_init_complete, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;ipc_inst[OC_IPC_CM_CPU2_ID].super) , &amp;im_evt_init_complete, (void *) 0 );

QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_CANA_ID].super) , &amp;im_evt_init_complete, (void *) 0 );
QASM_DISPATCH( &amp;(me-&gt;can_inst[OC_CAN_MCAN_ID].super) , &amp;im_evt_init_complete, (void *) 0 );</action>
        <tran_glyph conn="8,32,3,3,28">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,26,20,12">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${CM::AOs::AO_Communication::Communication::SM::Operation}-->
      <state name="Operation">
       <!--${CM::AOs::AO_Communication::Communication::SM::Operation::IPC_RECEIVE_MSG}-->
       <tran trig="IPC_RECEIVE_MSG">
        <action>uint16_t ID = Q_EVT_CAST(OC_Evt)-&gt;ID;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[ID].super) ,e, (void *) 0 );

for(; me-&gt;ipc_inst[ID].n_msg_received &gt; 0 ; me-&gt;ipc_inst[ID].n_msg_received--){
    oc_ipc_msg_t* msg_to_process = &amp; me-&gt;ipc_inst[ID].msg_buffer[me-&gt;ipc_inst[ID].n_msg_received-1];

    if(msg_to_process-&gt;com_ipc_sig&lt;COM_SIG_IPC_MAX){

        switch(msg_to_process-&gt;com_ipc_sig){
        case COM_SIG_IPC_CAN_SEND_MSG:{
            //uint16_t can_id = msg_to_process-&gt;payload[0];
            //QASM_DISPATCH( &amp; me-&gt;can_inst[can_id].super , event, (void *) 0);
            break;
        }
        default:{
            // Mutable Events or Imutable Events
            break;
        }
        }


    //
    }else{
        // Invalid Command
    }
}</action>
        <tran_glyph conn="36,10,3,-1,16">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${CM::AOs::AO_Communication::Communication::SM::Operation::IPC_FULL_BUS, IPC_RESET_CH, IPC_~}-->
       <tran trig="IPC_FULL_BUS, IPC_RESET_CH, IPC_REMOTE_RESET, IPC_RESET_COMPLETE, IPC_SEND_MSG">
        <action>uint16_t ID = Q_EVT_CAST(OC_Evt)-&gt;ID;

QASM_DISPATCH( &amp;(me-&gt;ipc_inst[ID].super) ,e, (void *) 0 );</action>
        <tran_glyph conn="36,12,3,-1,16">
         <action box="0,-2,19,9"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,4,38,46"/>
      </state>
      <state_diagram size="82,58"/>
     </statechart>
    </class>
    <!--${CM::AOs::AO_Communication::inst_ao_communication}-->
    <attribute name="inst_ao_communication" type="Communication" visibility="0x01" properties="0x00"/>
    <!--${CM::AOs::AO_Communication::globals}-->
    <package name="globals" stereotype="0x00">
     <!--${CM::AOs::AO_Communication::globals::p_ao_communication}-->
     <attribute name="p_ao_communication" type="QActive * const" visibility="0x00" properties="0x00">
      <code>= &amp;inst_ao_communication.super;</code>
     </attribute>
     <!--${CM::AOs::AO_Communication::globals::ao_communication_ctor}-->
     <operation name="ao_communication_ctor" type="void" visibility="0x00" properties="0x00">
      <!--${CM::AOs::AO_Communication::globals::ao_communication~::pAO}-->
      <parameter name="pAO" type="const QActive  * const"/>
      <code>Communication * const me = (Communication *) pAO;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Communication_initial));

// Orthogonal Components

OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CM_CPU1_ID] , &amp;me-&gt;super, OC_IPC_CM_CPU1_ID);
OC_IPC_ctor(&amp;me-&gt;ipc_inst[OC_IPC_CM_CPU2_ID] , &amp;me-&gt;super, OC_IPC_CM_CPU2_ID);

OC_CAN_ctor(&amp;me-&gt;can_inst[OC_CAN_CANA_ID] ,&amp;me-&gt;super, OC_CAN_CANA_ID);
OC_CAN_ctor(&amp;me-&gt;can_inst[OC_CAN_MCAN_ID] ,&amp;me-&gt;super, OC_CAN_MCAN_ID);</code>
     </operation>
    </package>
   </package>
  </package>
  <!--${CM::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${CM::Signals::private_signals}-->
   <attribute name="private_signals" type="enum" visibility="0x04" properties="0x00">
    <code>{
// Publish Subscribe Signals
    TIMEOUT_SIG = Q_USER_SIG,

    // - Only PRIVATE

    MAX_PUB_SIG,

    // COMMON Signals
    RUNNING_QF_SIG,
    INIT_COMPLETE_SIG,

    // CAN OC Signals
    OC_CAN_SIGNALS,

    // IPC OC Signals
    OC_IPC_SIGNALS,

    MAX_PRIVATE_SIG,
};</code>
   </attribute>
   <!--${CM::Signals::struct}-->
   <attribute name="struct" type="typedef" visibility="0x04" properties="0x00">
    <code>{
    uint16_t const sig_id;
    QActive * const p_ao;
}com_ipc_tag_t;</code>
   </attribute>
   <!--${CM::Signals::com_signals_ipc_table[COM_SIG_IP~}-->
   <attribute name="com_signals_ipc_table[COM_SIG_IPC_MAX]" type="QActive * const" visibility="0x00" properties="0x00">
    <code>={
    [COM_SIG_IPC_CAN_SEND_MSG] ={
        .sig_id = CAN_SEND_MSG_SIG,
        .p_ao = p_ao_communication,
    };
}</code>
   </attribute>
  </package>
  <!--${CM::ao_priority}-->
  <attribute name="ao_priority" type="enum" visibility="0x04" properties="0x00">
   <code>{
    // Priority in ascendance order
    IDLE_TASK=0U,
    AO_COMMUNICATION_PRIO,
};</code>
  </attribute>
  <!--${CM::OC_enum}-->
  <package name="OC_enum" stereotype="0x00">
   <!--${CM::OC_enum::IPC}-->
   <package name="IPC" stereotype="0x00">
    <!--${CM::OC_enum::IPC::ipc_named}-->
    <attribute name="ipc_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_IPC_CM_CPU1_ID,
    OC_IPC_CM_CPU2_ID,
    OC_IPC_NUM_OF_INST,
};</code>
    </attribute>
   </package>
   <!--${CM::OC_enum::CAN}-->
   <package name="CAN" stereotype="0x00">
    <!--${CM::OC_enum::CAN::can_named}-->
    <attribute name="can_named" type="enum" visibility="0x04" properties="0x00">
     <code>{
    OC_CAN_CANA_ID,
    OC_CAN_MCAN_ID,
    OC_CAN_NUM_OF_INST,
};</code>
    </attribute>
   </package>
  </package>
  <!--${CM::AO_enum}-->
  <package name="AO_enum" stereotype="0x00"/>
  <!--${CM::Immutable_Events}-->
  <package name="Immutable_Events" stereotype="0x00">
   <!--${CM::Immutable_Events::General}-->
   <package name="General" stereotype="0x00">
    <!--${CM::Immutable_Events::General::im_evt_running_qf}-->
    <attribute name="im_evt_running_qf" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(RUNNING_QF_SIG);</code>
    </attribute>
    <!--${CM::Immutable_Events::General::im_evt_init_complete}-->
    <attribute name="im_evt_init_complete" type="QEvt const" visibility="0x00" properties="0x00">
     <code>= QEVT_INITIALIZER(INIT_COMPLETE_SIG);</code>
    </attribute>
   </package>
   <!--${CM::Immutable_Events::Communication}-->
   <package name="Communication" stereotype="0x00">
    <!--${CM::Immutable_Events::Communication::im_evt_ipc_receive_msg[OC_IPC_NU~}-->
    <attribute name="im_evt_ipc_receive_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RECEIVE_MSG_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::Communication::im_evt_ipc_send_msg[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_send_msg[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_SEND_MSG_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::Communication::im_evt_ipc_full_bus[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_full_bus[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_FULL_BUS_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::Communication::im_evt_ipc_reset_ch[OC_IPC_NUM_O~}-->
    <attribute name="im_evt_ipc_reset_ch[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_CH_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::Communication::im_evt_ipc_reset_complete[OC_IPC~}-->
    <attribute name="im_evt_ipc_reset_complete[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_RESET_COMPLETE_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    }
};</code>
    </attribute>
    <!--${CM::Immutable_Events::Communication::im_evt_ipc_remote_reset[OC_IPC_N~}-->
    <attribute name="im_evt_ipc_remote_reset[OC_IPC_NUM_OF_INST]" type="OC_Evt const" visibility="0x00" properties="0x00">
     <code>={
    [OC_IPC_CM_CPU1_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CM_CPU1_ID,
    },
    [OC_IPC_CM_CPU2_ID] = {
        .super = QEVT_INITIALIZER(IPC_REMOTE_RESET_SIG),
        .ID = OC_IPC_CM_CPU2_ID,
    }
};</code>
    </attribute>
   </package>
  </package>
 </package>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x00">
  <!--${Shared::Signals}-->
  <package name="Signals" stereotype="0x00">
   <!--${Shared::Signals::com_signals_ipc}-->
   <attribute name="com_signals_ipc" type="enum" visibility="0x04" properties="0x00">
    <code>{
    //Index Signals Here
    COM_SIG_IPC_CAN_SEND_MSG,
    COM_SIG_IPC_MAX,
};</code>
   </attribute>
   <!--${Shared::Signals::com_signals_can}-->
   <attribute name="com_signals_can" type="enum" visibility="0x04" properties="0x00">
    <code>{
    COM_SIG_CAN_MAX,
};</code>
   </attribute>
  </package>
  <!--${Shared::Event_Types}-->
  <package name="Event_Types" stereotype="0x00">
   <!--${Shared::Event_Types::OC_Evt}-->
   <class name="OC_Evt" superclass="qpc::QEvt">
    <!--${Shared::Event_Types::OC_Evt::ID}-->
    <attribute name="ID" type="uint16_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Event_Types::OC_TimeEvt}-->
   <class name="OC_TimeEvt" superclass="qpc::QTimeEvt">
    <!--${Shared::Event_Types::OC_TimeEvt::ID}-->
    <attribute name="ID" type="uint16_t" visibility="0x00" properties="0x00"/>
   </class>
   <!--${Shared::Event_Types::OC_IPC_types}-->
   <package name="OC_IPC_types" stereotype="0x00">
    <!--${Shared::Event_Types::OC_IPC_types::struct}-->
    <attribute name="struct" type="typedef" visibility="0x04" properties="0x00">
     <code>{
    uint16_t com_ipc_sig;
    uint16_t payload[BSP_IPC_MAX_PAYLOAD_SIZE-2];
}oc_ipc_msg_t;</code>
    </attribute>
    <!--${Shared::Event_Types::OC_IPC_types::OC_Evt_IPC_Message_t}-->
    <class name="OC_Evt_IPC_Message_t" superclass="Shared::Event_Types::OC_Evt">
     <!--${Shared::Event_Types::OC_IPC_types::OC_Evt_IPC_Messa~::msg}-->
     <attribute name="msg" type="oc_ipc_msg_t" visibility="0x00" properties="0x00"/>
    </class>
   </package>
  </package>
  <!--${Shared::Macros}-->
  <package name="Macros" stereotype="0x00">
   <!--${Shared::Macros::OC_IPC_CMD_REMOTE_RESET}-->
   <attribute name="OC_IPC_CMD_REMOTE_RESET" type="" visibility="0x03" properties="0x00">
    <code>0
</code>
   </attribute>
   <!--${Shared::Macros::OC_IPC_CMD_RESET_COMPLETE}-->
   <attribute name="OC_IPC_CMD_RESET_COMPLETE" type="" visibility="0x03" properties="0x00">
    <code>1</code>
   </attribute>
  </package>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::Cores_Project}-->
  <directory name="Cores_Project">
   <!--${.::Cores_Project::CPU1}-->
   <directory name="CPU1">
    <!--${.::Cores_Project::CPU1::qm_files}-->
    <directory name="qm_files">
     <!--${.::Cores_Project::CPU1::qm_files::AOs}-->
     <directory name="AOs">
      <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_communication}-->
      <directory name="ao_communication">
       <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_communication::communication.h}-->
       <file name="communication.h">
        <text>#ifndef AO_COMMUNICATION_H_
#define AO_COMMUNICATION_H_

#include &quot;main_qm.h&quot;
#include &quot;communication_app/communication_app.h&quot;

// Orthogonal Component
#include &quot;OCs/oc_ipc/oc_ipc.h&quot;
#include &quot;OCs/oc_can/oc_can.h&quot;

$declare${CPU1::AOs::AO_Communication}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_communication::communication.c}-->
       <file name="communication.c">
        <text>#include &quot;./communication.h&quot;

Q_DEFINE_THIS_FILE

$define${CPU1::AOs::AO_Communication}

</text>
       </file>
      </directory>
      <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control}-->
      <directory name="ao_fsbb_control">
       <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control::fsbb_control.h}-->
       <file name="fsbb_control.h">
        <text>#ifndef AO_FSBB_CONTROL_H_
#define AO_FSBB_CONTROL_H_

#include &quot;main_qm.h&quot;
#include &quot;fsbb_control_app/fsbb_control_app.h&quot;

$declare${CPU1::AOs::AO_FSBB_Control}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU1::qm_files::AOs::ao_fsbb_control::fsbb_control.c}-->
       <file name="fsbb_control.c">
        <text>#include &quot;./fsbb_control.h&quot;

$define${CPU1::AOs::AO_FSBB_Control}</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CPU1::qm_files::OCs}-->
     <directory name="OCs">
      <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_ipc}-->
      <directory name="oc_ipc">
       <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_ipc::oc_ipc.h}-->
       <file name="oc_ipc.h">
        <text>#ifndef OC_IPC_H_
#define OC_IPC_H_

#include &quot;main_qm.h&quot;
#include &quot;ipc_app/ipc_app.h&quot;

$declare${OCs::OC_IPC}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_ipc::oc_ipc.c}-->
       <file name="oc_ipc.c">
        <text>#include &quot;./oc_ipc.h&quot;

$define${OCs::OC_IPC}</text>
       </file>
      </directory>
      <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_can}-->
      <directory name="oc_can">
       <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_can::oc_can.h}-->
       <file name="oc_can.h">
        <text>#ifndef OC_CAN_H_
#define OC_CAN_H_

#include &quot;main_qm.h&quot;
#include &quot;can_app/can_app.h&quot;

$declare${OCs::OC_CAN}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU1::qm_files::OCs::oc_can::oc_can.c}-->
       <file name="oc_can.c">
        <text>#include &quot;./oc_can.h&quot;

$define${OCs::OC_CAN}</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CPU1::qm_files::main_qm.h}-->
     <file name="main_qm.h">
      <text>#ifndef MAIN_QM_H_
#define MAIN_QM_H_

#include &quot;ipc_config.h&quot;
#include &quot;qpc.h&quot;
#include &quot;bsp_basic.h&quot;

//================================================
//====================Signals=====================
//================================================

$declare${Shared}

$declare${OCs::Signals}

$declare${CPU1::Signals}

//================================================
//===================Priorities===================
//================================================

$declare${CPU1::ao_priority}

//================================================
//=================Active-Objects=================
//================================================

// AO_FSBB_Control
$declare${CPU1::AOs::AO_FSBB_Control::globals}

// AO_Communication
$declare${CPU1::AOs::AO_Communication::globals}

//================================================
//=============Orthogonal-Components==============
//================================================

$declare${CPU1::OC_enum}

//================================================
//================Immutable-Events================
//================================================

$declare${CPU1::Immutable_Events}

#endif // MAIN_QM_H_</text>
     </file>
     <!--${.::Cores_Project::CPU1::qm_files::main_qm.c}-->
     <file name="main_qm.c">
      <text>#include &quot;main_qm.h&quot;

$define${Shared}

$define${CPU1::Immutable_Events}</text>
     </file>
    </directory>
   </directory>
   <!--${.::Cores_Project::CPU2}-->
   <directory name="CPU2">
    <!--${.::Cores_Project::CPU2::qm_files}-->
    <directory name="qm_files">
     <!--${.::Cores_Project::CPU2::qm_files::AOs}-->
     <directory name="AOs">
      <!--${.::Cores_Project::CPU2::qm_files::AOs::ao_communication}-->
      <directory name="ao_communication">
       <!--${.::Cores_Project::CPU2::qm_files::AOs::ao_communication::communication.h}-->
       <file name="communication.h">
        <text>#ifndef AO_COMMUNICATION_H_
#define AO_COMMUNICATION_H_

#include &quot;main_qm.h&quot;
#include &quot;communication_app/communication_app.h&quot;

// Orthogonal Component
#include &quot;OCs/oc_ipc/oc_ipc.h&quot;

$declare${CPU2::AOs::AO_Communication}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU2::qm_files::AOs::ao_communication::communication.c}-->
       <file name="communication.c">
        <text>#include &quot;./communication.h&quot;

Q_DEFINE_THIS_FILE

$define${CPU2::AOs::AO_Communication}

</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CPU2::qm_files::OCs}-->
     <directory name="OCs">
      <!--${.::Cores_Project::CPU2::qm_files::OCs::oc_ipc}-->
      <directory name="oc_ipc">
       <!--${.::Cores_Project::CPU2::qm_files::OCs::oc_ipc::oc_ipc.h}-->
       <file name="oc_ipc.h">
        <text>#ifndef OC_IPC_H_
#define OC_IPC_H_

#include &quot;main_qm.h&quot;
#include &quot;ipc_app/ipc_app.h&quot;

$declare${OCs::OC_IPC}

#endif</text>
       </file>
       <!--${.::Cores_Project::CPU2::qm_files::OCs::oc_ipc::oc_ipc.c}-->
       <file name="oc_ipc.c">
        <text>#include &quot;./oc_ipc.h&quot;

$define${OCs::OC_IPC}</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CPU2::qm_files::main_qm.h}-->
     <file name="main_qm.h">
      <text>#ifndef MAIN_QM_H_
#define MAIN_QM_H_

#include &quot;ipc_config.h&quot;
#include &quot;qpc.h&quot;
#include &quot;bsp_basic.h&quot;

//================================================
//====================Signals=====================
//================================================

$declare${Shared}

$declare${OCs::Signals}

$declare${CPU2::Signals}

//================================================
//===================Priorities===================
//================================================

$declare${CPU2::ao_priority}

//================================================
//=================Active-Objects=================
//================================================

// AO_Communication
$declare${CPU2::AOs::AO_Communication::globals}

//================================================
//=============Orthogonal-Components==============
//================================================

$declare${CPU2::OC_enum}

//================================================
//================Immutable-Events================
//================================================

$declare${CPU1::Immutable_Events}

#endif // MAIN_QM_H_</text>
     </file>
     <!--${.::Cores_Project::CPU2::qm_files::main_qm.c}-->
     <file name="main_qm.c">
      <text>#include &quot;main_qm.h&quot;

$define${Shared}

$define${CPU2::Immutable_Events}</text>
     </file>
    </directory>
   </directory>
   <!--${.::Cores_Project::CM}-->
   <directory name="CM">
    <!--${.::Cores_Project::CM::qm_files}-->
    <directory name="qm_files">
     <!--${.::Cores_Project::CM::qm_files::AOs}-->
     <directory name="AOs">
      <!--${.::Cores_Project::CM::qm_files::AOs::ao_communication}-->
      <directory name="ao_communication">
       <!--${.::Cores_Project::CM::qm_files::AOs::ao_communication::communication.h}-->
       <file name="communication.h">
        <text>#ifndef AO_COMMUNICATION_H_
#define AO_COMMUNICATION_H_

#include &quot;main_qm.h&quot;
#include &quot;communication_app/communication_app.h&quot;

// Orthogonal Component
#include &quot;OCs/oc_ipc/oc_ipc.h&quot;
#include &quot;OCs/oc_can/oc_can.h&quot;

$declare${CM::AOs::AO_Communication}

#endif</text>
       </file>
       <!--${.::Cores_Project::CM::qm_files::AOs::ao_communication::communication.c}-->
       <file name="communication.c">
        <text>#include &quot;./communication.h&quot;

Q_DEFINE_THIS_FILE

$define${CM::AOs::AO_Communication}

</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CM::qm_files::OCs}-->
     <directory name="OCs">
      <!--${.::Cores_Project::CM::qm_files::OCs::oc_ipc}-->
      <directory name="oc_ipc">
       <!--${.::Cores_Project::CM::qm_files::OCs::oc_ipc::oc_ipc.h}-->
       <file name="oc_ipc.h">
        <text>#ifndef OC_IPC_H_
#define OC_IPC_H_

#include &quot;main_qm.h&quot;
#include &quot;ipc_app/ipc_app.h&quot;

$declare${OCs::OC_IPC}

#endif</text>
       </file>
       <!--${.::Cores_Project::CM::qm_files::OCs::oc_ipc::oc_ipc.c}-->
       <file name="oc_ipc.c">
        <text>#include &quot;./oc_ipc.h&quot;

$define${OCs::OC_IPC}</text>
       </file>
      </directory>
      <!--${.::Cores_Project::CM::qm_files::OCs::oc_can}-->
      <directory name="oc_can">
       <!--${.::Cores_Project::CM::qm_files::OCs::oc_can::oc_can.h}-->
       <file name="oc_can.h">
        <text>#ifndef OC_CAN_H_
#define OC_CAN_H_

#include &quot;main_qm.h&quot;
#include &quot;can_app/can_app.h&quot;

$declare${OCs::OC_CAN}

#endif</text>
       </file>
       <!--${.::Cores_Project::CM::qm_files::OCs::oc_can::oc_can.c}-->
       <file name="oc_can.c">
        <text>#include &quot;./oc_can.h&quot;

$define${OCs::OC_CAN}</text>
       </file>
      </directory>
     </directory>
     <!--${.::Cores_Project::CM::qm_files::main_qm.h}-->
     <file name="main_qm.h">
      <text>#ifndef MAIN_QM_H_
#define MAIN_QM_H_

#include &quot;ipc_config.h&quot;
#include &quot;qpc.h&quot;
#include &quot;bsp_basic.h&quot;

//================================================
//====================Signals=====================
//================================================

$declare${Shared}

$declare${OCs::Signals}

$declare${CM::Signals}

//================================================
//===================Priorities===================
//================================================

$declare${CM::ao_priority}

//================================================
//=================Active-Objects=================
//================================================

// AO_Communication
$declare${CM::AOs::AO_Communication::globals}

//================================================
//=============Orthogonal-Components==============
//================================================

$declare${CM::OC_enum}

//================================================
//================Immutable-Events================
//================================================

$declare${CPU1::Immutable_Events}

#endif // MAIN_QM_H_</text>
     </file>
     <!--${.::Cores_Project::CM::qm_files::main_qm.c}-->
     <file name="main_qm.c">
      <text>#include &quot;main_qm.h&quot;

$define${Shared}

$define${CM::Immutable_Events}</text>
     </file>
    </directory>
   </directory>
  </directory>
 </directory>
</model>
